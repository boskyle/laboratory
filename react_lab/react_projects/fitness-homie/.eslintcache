[{"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js":"1","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js":"2","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js":"3","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js":"4","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js":"5","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js":"6","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js":"7","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js":"8","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js":"9","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js":"10","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js":"11","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Journal/Journal.js":"12","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js":"13","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/userUid.js":"14","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js":"15","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js":"16","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js":"17","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js":"18","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js":"19","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js":"20","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js":"21","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js":"22"},{"size":979,"mtime":1610838531671,"results":"23","hashOfConfig":"24"},{"size":1013,"mtime":1611450937894,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1607557568584,"results":"26","hashOfConfig":"24"},{"size":456,"mtime":1610838531665,"results":"27","hashOfConfig":"24"},{"size":259,"mtime":1610838531671,"results":"28","hashOfConfig":"24"},{"size":2915,"mtime":1610922404336,"results":"29","hashOfConfig":"24"},{"size":3839,"mtime":1611450937894,"results":"30","hashOfConfig":"24"},{"size":5131,"mtime":1611444711901,"results":"31","hashOfConfig":"24"},{"size":5336,"mtime":1610838531668,"results":"32","hashOfConfig":"24"},{"size":232,"mtime":1611280190931,"results":"33","hashOfConfig":"24"},{"size":19364,"mtime":1611444711901,"results":"34","hashOfConfig":"24"},{"size":356,"mtime":1611280190931,"results":"35","hashOfConfig":"24"},{"size":368,"mtime":1610838531671,"results":"36","hashOfConfig":"24"},{"size":320,"mtime":1611343149407,"results":"37","hashOfConfig":"24"},{"size":1997,"mtime":1611280190931,"results":"38","hashOfConfig":"24"},{"size":1320,"mtime":1611444711901,"results":"39","hashOfConfig":"24"},{"size":216,"mtime":1610838531671,"results":"40","hashOfConfig":"24"},{"size":927,"mtime":1611444711901,"results":"41","hashOfConfig":"24"},{"size":2304,"mtime":1611447865753,"results":"42","hashOfConfig":"24"},{"size":2313,"mtime":1611444711897,"results":"43","hashOfConfig":"24"},{"size":4036,"mtime":1611451049730,"results":"44","hashOfConfig":"24"},{"size":382,"mtime":1611450937894,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1hv3lxb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js",[],["96","97"],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js",["98","99","100","101","102","103","104"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {useHistory,useParams} from \"react-router-dom\";\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {LoadBasicInfo,LoadFitnessInfo,getUidFromUsername} from './db-endpoints/loadProfile';\nimport  UserProfile from './UserProfile/UserProfile';\nimport '../assets/fonts/index.css';\nimport \"./dashboard.css\";\nimport AsyncSelect from 'react-select/async';\nimport {searchBoxStyle} from './SearchBox/SearchBox';\nimport {useDispatch} from 'react-redux';\nimport {userLoggedOut} from '../redux/actions';\nimport Navigation from './Navigation/Navigation';\n\n\n\n\n\nfunction Dashboard() {\n\n \n    // var to access passed variable from Login.js\n    const history = useHistory();\n    const {username} = useParams();\n\n\n    const [userInfo, setUserInfo] = useState({\n        username: '',\n        firstname: '',\n        lastname: '',\n        address: '',\n        country: '',\n    });\n\n    const [userFitness,setUserFitness] = useState({\n        age: '',\n        heightCm: '',\n        weightLbs: '',\n        gender: '',\n        activity: '',\n        bmr:'',\n        calories: ''\n    });\n\n    const filterUsername =  (inputValue) => {\n     \n          return fetch ('http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/usernameAsync.php',{\n                method: 'POST',\n                body:JSON.stringify(inputValue)\n            }).then(res => res.json());\n            \n      \n    }\n\n    const [searchInputValue, setSearchInputValue] = useState('');\n    const [selectedSearchInputValue, setSelectedSearchInputValue] = useState(null);\n    \n    const handleSearchInputChange = val => {\n        setSearchInputValue(val);\n    }\n    \n    const handleSelection = val => {\n        setSelectedSearchInputValue(val);\n    }\n    // console.log(\"search input: \"+searchInputValue);\n\n    const [dashUid,setDashUid] = useState(undefined);\n   \n    useEffect( () => {\n       \n        console.log(\"who is logged: \"+ loadFromLocalStorage('isLogged').isLogged[1]);\n        console.log(\"url param: \"+username);\n\n        let isMounted = true;\n    //    comment added\n        LoadBasicInfo(dashUid).then(data => {\n            if (isMounted) {\n                if (data !== false) {\n                    setUserInfo({\n                        username: data.username,\n                        firstname: data.firstname,\n                        lastname: data.lastname,\n                        country: data.country\n                    })\n                }\n            }\n        })\n        \n        LoadFitnessInfo(dashUid).then(data => {\n            if (isMounted) {\n                if (data !== false) {\n                    setUserFitness({\n                        gender: data.gender,\n                        age: data.age,\n                        height: data.height_cm,\n                        weight: data.weight_lbs,\n                        activity: data.activity_level,\n                        calories: data.calories,\n                        \n                    })\n                }\n            }\n        })\n        return () => {isMounted = false};  \n            // prevents memory leak, make sure that it is mounted first\n         \n    },[dashUid])\n\n    // set DashUid everytime selected input from async dropdown is changed\n    // make it local so on page refresh it retains the uid\n    useEffect(() => {\n        // console.log(selectedSearchInputValue.userlogin_id);\n        if(selectedSearchInputValue !== null) {\n            localStorage.setItem(\"dash-uid\",selectedSearchInputValue.userlogin_id);\n            history.push(`/${selectedSearchInputValue.username}`);\n        }      \n    },[selectedSearchInputValue])\n\n\n    // if searching through browser\n    useEffect(() => {\n        getUidFromUsername(username).then(uid => {\n          setDashUid(uid);\n          \n        })   \n    },[username])\n\n            if(username === \"settings\") {\n                return \"i am in settings\";\n            }\n        \n            return  (\n                // main component (gridbox and will be injected)\n                <div className=\"containerFluid\">\n                 \n                    <div className=\"row\">\n                        <div className=\"col-3 col-sm-2 col-md-2 d-flex flex-column justify-content-center\">\n                        <Navigation is_logged={loadFromLocalStorage('isLogged').isLogged[0]} is_loggedId ={loadFromLocalStorage('isLogged').isLogged[1]}/>\n                        </div>\n                        <div className=\"col-9 col-sm-10 col-md-8 p-2\">\n                            <UserProfile \n                                username={userInfo.username}\n                                firstname={userInfo.firstname}\n                                lastname={userInfo.lastname}\n                                address={userInfo.country}\n                                usernameSearched={username}\n                                gender={userFitness.gender}\n                                age={userFitness.age}\n                                height={userFitness.height}\n                                weight={userFitness.weight}\n                                activityLevel={userFitness.activity}\n                                calories={userFitness.calories}\n                            />                  \n                        </div>\n                        <div className=\"col-sm-2 col-md-2 d-none d-md-block text-center p-2\">\n                              \n                        <div className=\"d-flex flex-column align-items-center\" style={{width:\"100%\",height:\"100%\"}}>\n                            <AsyncSelect className=\"w-100 mt-3\" \n                             cacheOptions    \n                             placeholder=\"Discover..\"                     \n                             loadingMessage={() => 'searching...'}\n                             noOptionsMessage={() => 'doesnt exist'} \n                             loadOptions={filterUsername}              \n                             value={searchInputValue}\n                             getOptionValue={e => e.username}\n                             getOptionLabel={e => e.username}\n                             onInputChange={handleSearchInputChange}\n                             onChange={handleSelection}    \n                             styles={searchBoxStyle}\n                             components={{ DropdownIndicator:()=> null,IndicatorSeparator: () => null}}\n                            />                  \n                        </div>\n                        \n                        </div>\n                    </div>\n                </div>\n            );\n      \n\n  \n}\nexport default Dashboard;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js",["105","106","107"],"import React from 'react';\nimport './login.css';\nimport {useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useHistory} from 'react-router-dom';\nimport {Link} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {authenticateUserLoggedIn} from '../redux/actions';\nimport {isEmailExist,getUsernameFromId} from './db-endpoints/db-fetch';\n\n\n\n\n\nfunction Login() {\n    \n    const [error, setError] = useState('');\n    const history = useHistory();\n    const {handleSubmit,register,errors} = useForm();\n\n    // by default false\n    // const isLogged = useSelector(state => state.isLogged);\n    const dispatch = useDispatch();\n\n \n    \n\n    const onSubmit = async formData => {\n        \n       \n        let local_url = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/authenticate-user.php';\n       \n        // send email + password raw (get a resonpose (validation and authenticate user))\n        await fetch (local_url, {\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                email: formData.email,\n                password: formData.password\n            })\n        }).then(response => response.json())\n            .then(response => {\n               \n                /*  If the response returned back is an integer that means the php file fetched  ~ returned a uid \n                    which means the user had entered the right password.\n                */           \n                if (Number.isInteger(response)) {\n\n                    \n                    // uid (response) dispatch send\n                    dispatch(authenticateUserLoggedIn(response));\n                    /*  fetch uid from the logged in user, \n                        and pass this uid as paramter to another async function t\n                        hat will return the username\n                        associated with the userid and push it to the history stack to reroute to that username\n                    */\n                    getUsernameFromId(response).then( data => history.push(`/${data}`));                               \n                } else {setError(response);}\n                \n            })\n            .catch(err => console.log(err));\n     \n    }\n    \n\n    return  (\n\n        <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n\n        <form className=\"h-75 p-4 d-flex flex-column justify-content-start\" onSubmit={handleSubmit(onSubmit)} noValidate>\n        \n            <div className=\"form-group\">\n                <label htmlFor=\"emailInput\">Email Address</label>\n                <input name=\"email\" type=\"email\" className=\"form-control\" id=\"\" aria-describedby=\"emailInput\"\n                ref={register({\n                    // use validate prop. and pass async callback function to fetch users email + password\n                    required: {\n                        value: true,\n                        message: \"Enter your email address.\"\n                    },\n                    pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                        message: \"This email doesn't exist.\",\n                    },\n                    // ajax-like validation if email exist in db\n                    validate: isEmailExist\n                })}\n                />\n                {errors.email && <span>{errors.email.message}</span>}\n                {errors.email && errors.email.type === \"validate\" && (\n                <span>This email is not registered.</span>\n                )}</div>\n                    \n\n                <div className=\"form-group mt-5\">\n                <label htmlFor=\"passwordInput\">Password</label>\n                <input name=\"password\" type=\"password\" className=\"form-control\" id=\"\" aria-describedby=\"passwordInput\"\n                    ref={register({\n                        required: {\n                            value: true,\n                            message: \"Enter your password.\"\n                        }\n                       \n                    })}\n                />\n                {errors.password &&<span>{errors.password.message}</span>}\n                {<span>{error}</span>}\n                </div>\n    \n                 <button type=\"submit\" className=\"btn mx-auto\">Login</button>\n                 <Link to=\"/register\" className=\"mx-auto mt-2\" style={{textDecoration:\"none\"}}><span>Not a member ? Register here</span></Link>\n        </form>\n\n\n        </div>\n\n    );\n\n}\n\n\n\n\n\nexport default Login;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js",["108","109","110","111"],"import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useState,useEffect} from 'react';\nimport {CountryDropdown, RegionDropdown} from 'react-country-region-selector';\nimport './setup.css';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport {useLocation,Redirect} from 'react-router-dom';\nimport {saveToLocalStorage,loadFromLocalStorage} from '../LocalStorage';\nimport {getUsernameFromId} from './db-endpoints/db-fetch';\nimport {useHistory} from 'react-router-dom';\n\n\n\n\nvar basicInfo;\nvar basicInfoArray = new Array();\n\n\nlet bmr_tool_tip_string = \"An estimation on how much calories you need to consume to be able to sustain your weight.\"\n\n// component instance\nconst Setup = ()  => {\n    let registerBasicInfoApi = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/register-basic-info.php';\n    let registerFitnessInfoApi = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/register-basic-info-2.php';\n\n    const {register, handleSubmit, errors, reset} = useForm();\n    let history = useHistory();\n    \n\n  \n    \n    console.log(loadFromLocalStorage('isDataGiven'));\n\nlet activity = [\n    ['bmr', 1],\n    ['sedentary',1.2],\n    ['lightly-active', 1.375],\n    ['moderately-active',1.55],\n    ['very-active', 1.725],\n    ['extra-active', 1.9],\n];\n\n    \n    const [isFormSubmitted,setFlag] = useState(false);\n    const [country,setCountry] = useState('');\n    const [region, setRegion] = useState('');\n   \n    // dropdown\n    const [value,setValue]=useState('bmr');\n    const [gender,setGender]=useState('Male');\n    const [feet, setFeet]=useState('5');\n    const [inches,setInches]=useState('5');\n\n\n    \nconst selectCountry = (val) => {\n    setCountry(val);\n}\n\nconst selectRegion = (val) => {\n    setRegion(val);\n}\n\nconst dropDownChange = (e) => {\n    setValue(e.target.value);   \n}\n\nconst dropDownGender = (e) => {\n    setGender(e.target.value);   \n}\n\nconst dropDownFeet = (e) => {\n    setFeet(e.target.value);\n}\nconst dropDownInches = (e) => {\n    setInches(e.target.value);\n}\n\nconst isUsernameExist = async (userNameInput) => {\n    let userNameListingApi = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/check-username-exist.php';\n    let matcher = '';\n\n    try {\n        \n        \n        await fetch(userNameListingApi, {\n            method: 'GET',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json'\n            }\n            }).then(response => response.json())\n                .then(response => {\n                    response.forEach(username => {\n                        if(username === userNameInput) {\n                            matcher = userNameInput;\n                        }\n                    })\n                })\n                .catch(err => console.log(err))\n    \n                // console.log(matcher);\n          return (userNameInput === matcher) ? false : true;\n\n\n\n\n\n    } catch (err) {console.log(\"Something went wrong with email fetch:\"+err)}\n\n}\n\n/* initialize bascInfo object to fill in values:\n    username\n    firstname\n    lastname\n    country\n\n    setState of Flag to true (initially 0) to invoke a re-render of the second form.\n    reset() the react-hook-form object to clean and re-use for the second form.\n*/\nconst onSubmit = formData => {\n    \n    console.log(\"submit worked!\");\n        basicInfo = {   uid:loadFromLocalStorage(\"isLogged\").isLogged[1],\n                        username: formData.username,\n                        firstname: formData.firstname,\n                        lastname: formData.lastname,\n                        country: country+','+region,                   \n};\n\n    basicInfoArray.push(basicInfo);\n    setFlag(true);\n    reset();\n\n}\n\n\n// where all the submissions get posted\n\nconst onSubmit2 = async formData => {\n    console.log(\"submit 2 worked!\");\n    let height_cm = inchesToCentimeters(parseInt(feet),parseInt(inches));\n    let bmr = calculateBMR(gender,formData.weight,height_cm,formData.age);\n    let caloric_needs = calculateCalories(bmr,value);\n\n    basicInfo = {\n        bmr: bmr,\n        calories: caloric_needs,\n        weight_lbs: parseInt(formData.weight),\n        activity_level: value,\n        gender: gender,\n        height_cm: height_cm,\n        age: parseInt(formData.age)\n    }\n    basicInfoArray.push(basicInfo);\n    console.log(basicInfoArray);\n\n    await fetch (registerBasicInfoApi, {\n        method: 'POST',\n        headers: {\n            'accept': 'application/json',\n            'content-type':'application/json'\n        },\n        body: JSON.stringify(basicInfoArray[0])\n    }).then(response => response.text())\n        .then(response => console.log(\"SUCCESS\"))\n            .catch(error => console.log(error));\n\n\n    \n    await fetch (registerFitnessInfoApi, {\n        method: 'POST',\n        headers: {\n            'accept': 'application/json',\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n            uid: basicInfoArray[0].uid,\n            age: basicInfoArray[1].age,\n            gender: basicInfoArray[1].gender,\n            height: basicInfoArray[1].height_cm,\n            weight: basicInfoArray[1].weight_lbs,\n            activity_level: basicInfoArray[1].activity_level,\n            bmr: basicInfoArray[1].bmr,\n            calories: basicInfoArray[1].calories\n        })\n    }).then(response => response.text())\n            .then(response => console.log(\"SUCCESS\"))\n                .catch(error => console.log(error))\n\n\n\n    history.push(`/${basicInfoArray[0].username}`);\n\n}\n\n    const [username_boo, setUsername] = useState('');\n\n    useEffect (() => {\n        let isMounted = true;\n\n        if (loadFromLocalStorage('isLogged').isLogged[0] === true) {\n            console.log(loadFromLocalStorage('isLogged').isLogged[1])\n            getUsernameFromId(loadFromLocalStorage('isLogged').isLogged[1]).then (response => {\n                if(isMounted){setUsername(response);};   \n            })\n        }\n\n        return () => {\n            isMounted = false;\n        };\n\n    },[])\n\n    \n  \n    // if user is logged in (userId is  pushed into localStorage) BUT info is empty (info.username pushed into localStorage is non existant) then send them to this form\n    if (loadFromLocalStorage('isLogged').isLogged[0] === true && username_boo === undefined) {\n        if(isFormSubmitted === false) {      \n            return (\n                <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n                            <form className=\"h-75 p-4 d-flex flex-column justify-content-start\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                                <h2 className=\"mx-auto\">Let's Get Started</h2>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Username</label>\n                                    <input name=\"username\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Username is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{4,10}$/,\n                                                message: \"Length should be: 4-10 with no special characters.\"\n                                            },\n                                            validate: isUsernameExist\n                                        })}\n                                        \n                                        />\n                                        {errors.username && <span>{errors.username.message}</span>}\n                                        {errors.username && errors.username.type === \"validate\" && (\n                                        <span>Username already exists.</span>\n                                        )}\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Firstname</label>\n                                    <input name=\"firstname\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"firstnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Firstname is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{2,20}$/,\n                                                message: \"Firstname length should not be more than 20.\"\n                                            },\n                                            \n                                        })}\n                                        \n                                        />\n                                        {errors.firstname && <span>{errors.firstname.message}</span>}\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Lastname</label>\n                                    <input name=\"lastname\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"lastnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Lastname is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{2,20}$/,\n                                                message: \"Lastname length should not be more than 20.\"\n                                            },\n                                            \n                                        })}\n                                        \n                                        />\n                                        {errors.lastname && <span>{errors.lastname.message}</span>}\n                                </div>\n                                <div className=\"form-group\">\n                                <label htmlFor=\"emailInput\">Location (Optional)</label><br></br>\n                                <CountryDropdown value={country}  onChange={selectCountry}className=\"countryInput mr-4\"/>\n                                <RegionDropdown country={country} value={region}  onChange={selectRegion} className=\"regionInput\"/>\n                                \n        \n                                </div>\n                                <button type=\"submit\" className=\"btn mx-auto\">Next</button>\n                            </form>\n        \n        \n                </div>      \n            )\n        } else {return (\n            <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n      \n                <form className=\"h-75 p-4 d-flex flex-column justify-content-start text-center\" onSubmit={handleSubmit(onSubmit2)} noValidate>\n                    <span>\n                    <h2 className=\"mx-auto\" style={{fontSize: \"0.80em\"}}>LETS CALCULATE YOUR CALORIC NEEDS     \n                    <FaInfoCircle  className=\"text-info ml-3\" style={{position:\"relative\",fontSize:\"0.5em\"}}\n                    data-toggle=\"tooltip\" data-placement=\"bottom\" title={bmr_tool_tip_string}\n                    /></h2>              \n                    </span>\n                                                                \n                    <div className=\"form-group mx-auto\">\n                        <label htmlFor=\"ageInput\"><b>Age</b></label>\n                        <input name=\"age\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Age is required!\"\n                                            },\n                                            validate: {                                              \n                                                positive: (value) => parseInt(value, 10) > 0,\n                                                tooOld: (value) => parseInt(value, 10) < 120,\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Incorrect age format!\"\n                                            }                                                                           \n                                        })}                                \n                                        />\n                        {errors.age && <span>{errors.age.message}</span>}\n                        {errors.age?.type === \"tooOld\" && <span>Too old.</span>}\n                        {errors.age?.type === \"positive\" && <span>You can't be 0 years old silly.</span>}\n                    \n\n                    </div>\n                <div className=\"form-group mb-0 mt-2\">\n                <label htmlFor=\"ageInput\" style={{display:\"block\"}}><b>Activity</b></label>\n                    <select value={value} onChange={dropDownChange} className=\"w-75 mx-auto\" aria-describedby=\"activityInput\">\n                         <option value={activity[0][0]}>no exercise</option>\n                         <option value={activity[1][0]}>little or no exercise, desk job</option>\n                         <option value={activity[2][0]}>light exercise/ sports 1-3 days/week</option>\n                         <option value={activity[3][0]}>moderate exercise/ sports 6-7 days/week</option>\n                         <option value={activity[4][0]}>hard exercise every day, or exercising 2 xs/day</option>\n                         <option value={activity[5][0]}>hard exercise 2 or more times per day, or training for marathon, or triathlon, etc.. </option>\n                    </select>\n                </div>\n                <div className=\"form-group mb-0 mt-2\">\n                    <label htmlFor=\"genderInput\" style={{display:\"block\"}}><b>Gender</b></label>\n                    <select value={gender} onChange={dropDownGender} className=\"w-25 mx-auto text-center\" aria-describedby=\"genderInput\">\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>          \n                    </select>\n                </div>\n                <div className=\"form-group mb-0 mt-2\">\n                    <label htmlFor=\"feetInput\"  className=\"mb-2\"style={{display:\"block\"}}><b>Height</b></label>\n                    <label htmlFor=\"feetInput\">Feet</label>\n                    <select value={feet} onChange={dropDownFeet} className=\"w-25 text-center ml-2 mr-2\" aria-describedby=\"feetInput\">\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option> \n                        <option value=\"5\">5</option>   \n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>                \n                    </select>\n                    <label htmlFor=\"inchesInput\">Inches</label>\n                    <select value={inches} onChange={dropDownInches} className=\"w-25 text-center ml-2\" aria-describedby=\"feetInput\">\n                        <option value=\"0\">0</option>\n                        <option value=\"1\">1</option> \n                        <option value=\"2\">2</option>   \n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option> \n                        <option value=\"7\">7</option>   \n                        <option value=\"8\">8</option>\n                        <option value=\"9\">9</option>   \n                        <option value=\"10\">10</option>\n                        <option value=\"11\">11</option> \n                        <option value=\"12\">12</option>            \n                    </select>\n                </div>\n\n                <div className=\"form-group mb-1\">\n                <label htmlFor=\"weightInput\"><b>Weight (lbs)</b></label>\n                <input name=\"weight\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"weightInput\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Weight is required\"\n                    },\n\n                    validate: {\n                        notPossible: (value) => parseInt(value, 10) <= 1000\n                    },\n                    pattern: {\n                        value: /^[1-9][0-9]*$/,\n                        message: \"Incorrect weight format!\"\n                    }   \n                    \n                })}           \n                />\n                 {errors.weight && <span>{errors.weight.message}</span>}\n                 {errors.weight?.type === \"notPossible\" && <span>Not possible.</span>}\n                </div>\n\n            <button type=\"submit\" className=\"btn mx-auto\">Done</button>\n                </form>\n                \n\n\n            </div>\n\n\n        );}\n  \n                               \n    } else {return null}\n\n  \n} \n\n\n// rule of thumb, functions that dont have state change can go out of function\nconst inchesToCentimeters = (feet,inches) => {\n\n    let multiplier_to_inches = 12;\n    let multiplier_to_cm = 2.54;\n\n    let finalCentimeters = ((multiplier_to_inches * feet) + inches) * multiplier_to_cm;\n\n    return ~~finalCentimeters;\n}\n\nconst calculateBMR = (gender,bodyweight,height,age) => {\n    if (gender === \"Male\")\n    {\n        // metric\n        let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5;\n        // similar to casting to int\n        return ~~rounded;\n       \n    } else if (gender === \"Female\") {\n        // metric\n        let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5 - 161;\n        // similar to casting to int\n        return ~~rounded;\n    }\n\n}\nconst calculateCalories = (bmr,activity) => {\n    switch (activity) {\n        case \"bmr\":\n            return ~~(bmr * 1.0);\n        case \"sedentary\":\n            return ~~(bmr * 1.2);\n        case \"lightly-active\":\n            return ~~(bmr * 1.375);\n        case \"moderately-active\":\n            return ~~(bmr * 1.55);\n        case \"very-active\":\n            return ~~(bmr * 1.725);\n        case \"extra-active\":\n            return ~~(bmr * 1.9);\n        default:\n            return ~~(bmr);\n    }\n\n}\n\n\n\n\nexport {inchesToCentimeters,calculateBMR,calculateCalories};\nexport default Setup;\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Journal/Journal.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/userUid.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js",["112","113"],"import React from 'react';\nimport './searchbox.css';\nimport {FaSearch} from 'react-icons/fa';\n\nexport const searchBoxStyle = {\n    option: (provided, state) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'black' : 'black',\n      padding: 5,\n\n    }),\n    control: styles => ({ ...styles, backgroundColor: '#9088D4', width: '100%', textDecoration: 'none'}),\n    singleValue: (provided, state) => {\n      const opacity = state.isDisabled ? 1 : 1;\n      const transition = 'opacity 300ms';\n  \n      return { ...provided, opacity, transition };\n    },\n    menu: (provided, state) => ({\n        ...provided,\n        width: \"100%\",\n        borderBottom: '1px dotted pink',\n        color: state.selectProps.menuColor,\n        padding: 0,\n      }),\n      placeholder: (defaultStyles) => {\n        return {\n            ...defaultStyles,\n            color: '#ffffff',\n        }\n    }\n  }\n\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js",["114","115"],"import React from 'react';\nimport {NavLink,Link} from 'react-router-dom';\nimport {useHistory} from 'react-router-dom';\nimport {useState,useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {userLoggedOut} from '../../redux/actions';\nimport {LoadBasicInfo} from '../db-endpoints/loadProfile';\nimport {loadFromLocalStorage} from '../../LocalStorage';\nimport './navigation.css';\nimport {ImProfile} from 'react-icons/im';\nimport {RiUserSettingsLine} from 'react-icons/ri';\nimport {BiLogOutCircle} from 'react-icons/bi';\n\n\n\n\n\nconst Navigation = ({is_logged,is_loggedId}) => {\n \n    const dispatch = useDispatch();\n    const history = useHistory();\n    const logOut = () => {\n        // remove uid from superglobal associative araray local.storage ~~ and redirect to login page\n        dispatch(userLoggedOut());\n        history.push(\"/\");\n    }\n\n\n    const [navUsername,setNavUsername] = useState(undefined);\n\n    useEffect(() => {\n        LoadBasicInfo(is_loggedId).then(data => {\n            console.log(data.username);\n            setNavUsername(data.username);\n        })\n    },[])\n\n    if (is_logged === true)\n    {\n        return (\n        <div className=\"navigation-container\">\n                <div className=\"nav-item d-flex flex-column justify-content-center text-left\">\n                    <NavLink to={`/${navUsername}`} className=\"link\" activeClassName=\"link-active\"><span><h2 style={{display:\"inline\"}}>Dashboard</h2><ImProfile className=\"nav-icon mb-2 ml-2\"/></span></NavLink>\n                </div>\n                <div className=\"nav-item d-flex flex-column justify-content-center text-left\">    \n                    <NavLink to={`/settings`} className=\"link\"   activeClassName=\"link-active\"><span><h2 style={{display:\"inline\"}}>Settings</h2><RiUserSettingsLine className=\"nav-icon mb-2 ml-2\"/></span></NavLink>\n                </div>\n            \n               <div className=\"nav-item d-flex flex-column justify-content-center text-left\"><Link onClick={logOut} className=\"link\"><span><h2 style={{display:\"inline\"}}>Log Out</h2><BiLogOutCircle className=\"nav-icon mb-2 ml-2\"/></span></Link>\n               </div>\n        </div>\n        )\n    } else {\n        return (\n            <h3>Haven't Logged In ? / Sign up ?</h3>\n        );\n    }\n    \n\n\n\n}\n\n\n\n\n\n\nexport default Navigation;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js",["116","117","118","119","120","121","122","123","124"],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":3,"column":9,"nodeType":"131","messageId":"132","endLine":3,"endColumn":19},{"ruleId":"129","severity":1,"message":"133","line":6,"column":9,"nodeType":"131","messageId":"132","endLine":6,"endColumn":20},{"ruleId":"129","severity":1,"message":"134","line":9,"column":8,"nodeType":"131","messageId":"132","endLine":9,"endColumn":19},{"ruleId":"129","severity":1,"message":"135","line":10,"column":9,"nodeType":"131","messageId":"132","endLine":10,"endColumn":23},{"ruleId":"129","severity":1,"message":"136","line":11,"column":9,"nodeType":"131","messageId":"132","endLine":11,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":12,"column":9,"nodeType":"131","messageId":"132","endLine":12,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":89,"column":7,"nodeType":"140","endLine":89,"endColumn":16,"suggestions":"141"},{"ruleId":"129","severity":1,"message":"142","line":9,"column":22,"nodeType":"131","messageId":"132","endLine":9,"endColumn":39},{"ruleId":"129","severity":1,"message":"143","line":11,"column":9,"nodeType":"131","messageId":"132","endLine":11,"endColumn":27},{"ruleId":"129","severity":1,"message":"144","line":33,"column":13,"nodeType":"131","messageId":"132","endLine":33,"endColumn":31},{"ruleId":"129","severity":1,"message":"145","line":7,"column":9,"nodeType":"131","messageId":"132","endLine":7,"endColumn":20},{"ruleId":"129","severity":1,"message":"146","line":7,"column":21,"nodeType":"131","messageId":"132","endLine":7,"endColumn":29},{"ruleId":"129","severity":1,"message":"143","line":8,"column":9,"nodeType":"131","messageId":"132","endLine":8,"endColumn":27},{"ruleId":"147","severity":1,"message":"148","line":16,"column":22,"nodeType":"149","messageId":"150","endLine":16,"endColumn":33},{"ruleId":"129","severity":1,"message":"151","line":1,"column":8,"nodeType":"131","messageId":"132","endLine":1,"endColumn":13},{"ruleId":"129","severity":1,"message":"152","line":3,"column":9,"nodeType":"131","messageId":"132","endLine":3,"endColumn":17},{"ruleId":"129","severity":1,"message":"153","line":8,"column":9,"nodeType":"131","messageId":"132","endLine":8,"endColumn":29},{"ruleId":"138","severity":1,"message":"154","line":36,"column":7,"nodeType":"140","endLine":36,"endColumn":9,"suggestions":"155"},{"ruleId":"129","severity":1,"message":"156","line":3,"column":20,"nodeType":"131","messageId":"132","endLine":3,"endColumn":29},{"ruleId":"129","severity":1,"message":"153","line":4,"column":9,"nodeType":"131","messageId":"132","endLine":4,"endColumn":29},{"ruleId":"129","severity":1,"message":"157","line":5,"column":9,"nodeType":"131","messageId":"132","endLine":5,"endColumn":22},{"ruleId":"129","severity":1,"message":"158","line":5,"column":23,"nodeType":"131","messageId":"132","endLine":5,"endColumn":38},{"ruleId":"129","severity":1,"message":"159","line":5,"column":39,"nodeType":"131","messageId":"132","endLine":5,"endColumn":57},{"ruleId":"129","severity":1,"message":"136","line":11,"column":9,"nodeType":"131","messageId":"132","endLine":11,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":12,"column":9,"nodeType":"131","messageId":"132","endLine":12,"endColumn":22},{"ruleId":"129","severity":1,"message":"160","line":13,"column":8,"nodeType":"131","messageId":"132","endLine":13,"endColumn":18},{"ruleId":"138","severity":1,"message":"161","line":48,"column":3,"nodeType":"140","endLine":48,"endColumn":29,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'UserProfile' is defined but never used.","'AsyncSelect' is defined but never used.","'searchBoxStyle' is defined but never used.","'useDispatch' is defined but never used.","'userLoggedOut' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'urlParam'. Either include it or remove the dependency array.","ArrayExpression",["165"],"'getUsernameFromId' is defined but never used.","'saveToLocalStorage' is defined but never used.","'auth_rleative_path' is assigned a value but never used.","'useLocation' is defined but never used.","'Redirect' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'React' is defined but never used.","'FaSearch' is defined but never used.","'loadFromLocalStorage' is defined but never used.","React Hook useEffect has a missing dependency: 'is_loggedId'. Either include it or remove the dependency array.",["166"],"'useParams' is defined but never used.","'LoadBasicInfo' is defined but never used.","'LoadFitnessInfo' is defined but never used.","'getUidFromUsername' is defined but never used.","'Navigation' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [dashUid, urlParam]",{"range":"174","text":"175"},"Update the dependencies array to be: [is_loggedId]",{"range":"176","text":"177"},"Update the dependencies array to be: [history, selectedSearchInputValue]",{"range":"178","text":"179"},[2644,2653],"[dashUid, urlParam]",[1097,1099],"[is_loggedId]",[1671,1697],"[history, selectedSearchInputValue]"]