[{"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js":"1","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js":"2","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js":"3","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js":"4","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js":"5","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js":"6","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js":"7","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js":"8","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js":"9","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js":"10","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js":"11","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js":"12","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/userUid.js":"13","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js":"14","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js":"15","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js":"16","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js":"17","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js":"18","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js":"19","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js":"20","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js":"21","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/DB/validation.js":"22","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/Popup.js":"23","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/ProfileEdit/EditForm.js":"24","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/Logbook.js":"25","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/FoodItem/FoodItem.js":"26"},{"size":1001,"mtime":1611868023729,"results":"27","hashOfConfig":"28"},{"size":908,"mtime":1612213356470,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1607557568584,"results":"30","hashOfConfig":"28"},{"size":664,"mtime":1611698530219,"results":"31","hashOfConfig":"28"},{"size":259,"mtime":1610838531671,"results":"32","hashOfConfig":"28"},{"size":3081,"mtime":1611868237605,"results":"33","hashOfConfig":"28"},{"size":4453,"mtime":1612118352797,"results":"34","hashOfConfig":"28"},{"size":5336,"mtime":1611948357659,"results":"35","hashOfConfig":"28"},{"size":5336,"mtime":1610838531668,"results":"36","hashOfConfig":"28"},{"size":232,"mtime":1611280190931,"results":"37","hashOfConfig":"28"},{"size":18500,"mtime":1612212770006,"results":"38","hashOfConfig":"28"},{"size":368,"mtime":1610838531671,"results":"39","hashOfConfig":"28"},{"size":320,"mtime":1611343149407,"results":"40","hashOfConfig":"28"},{"size":1997,"mtime":1611604994436,"results":"41","hashOfConfig":"28"},{"size":1320,"mtime":1611444711901,"results":"42","hashOfConfig":"28"},{"size":236,"mtime":1611698530222,"results":"43","hashOfConfig":"28"},{"size":860,"mtime":1611698530219,"results":"44","hashOfConfig":"28"},{"size":4252,"mtime":1612196111537,"results":"45","hashOfConfig":"28"},{"size":2329,"mtime":1611942951974,"results":"46","hashOfConfig":"28"},{"size":4631,"mtime":1612118355474,"results":"47","hashOfConfig":"28"},{"size":497,"mtime":1611947002421,"results":"48","hashOfConfig":"28"},{"size":2046,"mtime":1611698530219,"results":"49","hashOfConfig":"28"},{"size":1533,"mtime":1612132041535,"results":"50","hashOfConfig":"28"},{"size":15737,"mtime":1612392947945,"results":"51","hashOfConfig":"28"},{"size":9769,"mtime":1612461648573,"results":"52","hashOfConfig":"28"},{"size":303,"mtime":1612362447875,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"v5j2qq",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js",[],["114","115"],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js",["116"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {LoadBasicInfo,LoadFitnessInfo,getUidFromUsername} from './db-endpoints/loadProfile';\nimport '../assets/fonts/index.css';\nimport \"./dashboard.css\";\nimport Navigation from './Navigation/Navigation';\nimport DashboardContainer from './DashboardContainer';\n\nfunction Dashboard() {\n\n    // const history = useHistory();\n    const {urlParam} = useParams();\n\n\n    const [userInfo, setUserInfo] = useState({\n        username: '',\n        firstname: '',\n        lastname: '',\n        address: '',\n        country: '',\n    });\n\n    const [userFitness,setUserFitness] = useState({\n        age: '',\n        heightCm: '',\n        weightLbs: '',\n        gender: '',\n        activity: '',\n        bmr:'',\n        calories: '',\n        calories_target: ''\n    });\n\n    const [dashUid,setDashUid] = useState(undefined);\n    useEffect(() => {\n        let isMounted = true;\n\n        getUidFromUsername(urlParam).then(uid => {\n            if(isMounted === true) {\n                setDashUid(uid);     \n            }\n        })  \n\n        return () => {isMounted = false;}\n    },[urlParam])\n    \n   \n    useEffect( () => {\n       \n        let isMounted = true;\n        let isMounted2 = true;\n    //    comment added\n        LoadBasicInfo(dashUid).then(data => {\n            if (isMounted === true) {\n                if (data !== false) {\n                    setUserInfo({\n                        username: data.username,\n                        firstname: data.firstname,\n                        lastname: data.lastname,\n                        country: data.country\n                    })\n                }\n            }\n        })\n        \n        LoadFitnessInfo(dashUid).then(data => {\n            if (isMounted2 === true) {\n                if (data !== false) {\n                    setUserFitness({\n                        gender: data.gender,\n                        age: data.age,\n                        height: data.height_cm,\n                        weight: data.weight_lbs,\n                        activity: data.activity_level,\n                        calories: data.calories,\n                        calories_target: data.calories_target\n                    })\n                }\n            }\n        })\n         // prevents memory leak, make sure that it is mounted first\n        return () => {isMounted = false; isMounted2 = false;} \n           \n         \n    },[dashUid])\n\n    const [loggedUid,setLoggedUid] = useState(undefined);\n\n    useEffect( () => {\n        let isMounted = true;\n        // wait to fetch logged in Object (initially undefined)\n        if (loadFromLocalStorage('isLogged').isLogged[1] !== undefined)\n        {\n            if (isMounted === true)\n            {\n                setLoggedUid(loadFromLocalStorage('isLogged').isLogged[1][0]);\n                \n            }\n        }\n        return () => {isMounted = false;}\n        \n},[loadFromLocalStorage('isLogged').isLogged[1]])\n\n\nuseEffect( () => {\n    console.log(\"dashboard mounted\");\n},[])\n\nuseEffect( () => {\n    return () => {console.log(\"dashboard unmounted\");}\n},[])\n\n\n\n\n\n\n        return (\n            <div className=\"containerFluid\">\n                <div className=\"row\">\n                <div className=\"col-3 col-sm-2 col-md-2 d-flex flex-column justify-content-center\">\n                    <Navigation is_logged={loadFromLocalStorage('isLogged').isLogged[0]}/>\n                </div>\n                <DashboardContainer \n                        \n                        urlParam={urlParam}    \n                        uid={loggedUid}\n                        username={userInfo.username}\n                        firstname={userInfo.firstname}\n                        lastname={userInfo.lastname}\n                        country={userInfo.country}\n                        // fitness Information\n                        gender={userFitness.gender}\n                        age={userFitness.age}\n                        height={userFitness.height}\n                        weight={userFitness.weight}\n                        activityLevel={userFitness.activity}\n                        calories={userFitness.calories}\n                        caloriesTarget={userFitness.calories_target}\n                        />\n                </div>   \n            </div>\n            );\n\n\n  \n}\nexport default Dashboard;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js",["117"],"import React from 'react';\nimport './login.css';\nimport {useState} from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useHistory} from 'react-router-dom';\nimport {Redirect,Link} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {authenticateUserLoggedIn} from '../redux/actions';\nimport {isEmailExist,getUsernameFromId} from './db-endpoints/db-fetch';\nimport {LoadBasicInfo} from '../Dashboard/./db-endpoints/loadProfile';\n\n\n\n\n\nfunction Login() {\n    \n    const [error, setError] = useState('');\n    const history = useHistory();\n    const {handleSubmit,register,errors} = useForm();\n\n    // by default false\n    // const isLogged = useSelector(state => state.isLogged);\n    const dispatch = useDispatch();\n\n \n    \n\n    const onSubmit = async formData => {\n        \n       \n        let local_url = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/authenticate-user.php';\n        // let auth_rleative_path = \"./authenticate-user.php\";\n       \n        // send email + password raw (get a resonpose (validation and authenticate user))\n        await fetch (local_url, {\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                email: formData.email,\n                password: formData.password\n            })\n        }).then(uid => uid.json())\n            .then(uid => {\n               \n                /*  If the response returned back is an integer that means the php file fetched  ~ returned a uid \n                    which means the user had entered the right password.\n                */           \n                if (Number.isInteger(uid)) {\n                    \n                    // added username to the redux payload along with his/her userid\n                    getUsernameFromId(uid).then (username => {\n                        dispatch(authenticateUserLoggedIn(uid,username));\n                    });\n                    // uid (response) dispatch send\n                    /*  fetch uid from the logged in user, \n                        and pass this uid as paramter to another async function t\n                        hat will return the username\n                        associated with the userid and push it to the history stack to reroute to that username\n                    */\n                     LoadBasicInfo(uid).then(response => {\n                                if (response === false) {\n                                    history.push({\n                                        pathname: \"/login/setup\",\n                                        val: false\n                                    });\n                            } else { history.replace(`/${response.username}`);}\n                           \n                     })\n\n                                         \n                } else {setError(uid);}\n                \n            })\n            .catch(err => console.log(err));\n     \n    }\n    \n\n    return  (\n\n        <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n\n        <form className=\"h-75 p-4 d-flex flex-column justify-content-start\" onSubmit={handleSubmit(onSubmit)} noValidate>\n        \n            <div className=\"form-group\">\n                <label htmlFor=\"emailInput\">Email Address</label>\n                <input name=\"email\" type=\"email\" className=\"form-control\" id=\"\" aria-describedby=\"emailInput\"\n                ref={register({\n                    // use validate prop. and pass async callback function to fetch users email + password\n                    required: {\n                        value: true,\n                        message: \"Enter your email address.\"\n                    },\n                    pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                        message: \"This email doesn't exist.\",\n                    },\n                    // ajax-like validation if email exist in db\n                    validate: isEmailExist\n                })}\n                />\n                {errors.email && <span>{errors.email.message}</span>}\n                {errors.email && errors.email.type === \"validate\" && (\n                <span>This email is not registered.</span>\n                )}</div>\n                    \n\n                <div className=\"form-group mt-5\">\n                <label htmlFor=\"passwordInput\">Password</label>\n                <input name=\"password\" type=\"password\" className=\"form-control\" id=\"\" aria-describedby=\"passwordInput\"\n                    ref={register({\n                        required: {\n                            value: true,\n                            message: \"Enter your password.\"\n                        }\n                       \n                    })}\n                />\n                {errors.password &&<span>{errors.password.message}</span>}\n                {<span>{error}</span>}\n                </div>\n    \n                 <button type=\"submit\" className=\"btn mx-auto\">Login</button>\n                 <Link to=\"/register\" className=\"mx-auto mt-2\" style={{textDecoration:\"none\"}}><span>Not a member ? Register here</span></Link>\n        </form>\n\n\n        </div>\n\n    );\n\n}\n\n\n\n\n\nexport default Login;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js",["118"],"import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport {useState} from 'react';\nimport { FaInfoCircle } from 'react-icons/fa';\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {useHistory} from 'react-router-dom';\nimport {isUsernameExist} from '../DB/validation';\nimport {useDispatch,useSelector} from 'react-redux';\nimport {authenticateUserLoggedIn} from '../redux/actions';\nimport './setup.css';\n\n\n\n// let foo = loadFromLocalStorage('isLogged').isLogged[0];\n// let buff = loadFromLocalStorage('isLogged').isLogged[1];\n\n\n\nconsole.log(loadFromLocalStorage('isLogged').isLogged);\n\n\nvar basicInfo;\nvar basicInfoArray = new Array();\n\n\nlet bmr_tool_tip_string = \"An estimation on how much calories you need to consume to be able to sustain your weight.\"\n\n// component instance\nconst Setup = ()  => {\n    let registerBasicInfoApi = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/register-basic-info.php';\n    let registerFitnessInfoApi = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Login/register-basic-info-2.php';\n\n    const {register, handleSubmit, errors, reset} = useForm();\n    let history = useHistory();\n    const dispatch = useDispatch();\n\n    const rState = useSelector(state => state.isLogged[0]);\n    console.log(rState);\n\n\n    \n\nlet activity = [\n    ['bmr', 1],\n    ['sedentary',1.2],\n    ['lightly-active', 1.375],\n    ['moderately-active',1.55],\n    ['very-active', 1.725],\n    ['extra-active', 1.9],\n];\n\n    \n    const [isFormSubmitted,setFlag] = useState(false);\n    // const [country,setCountry] = useState('');\n    // const [region, setRegion] = useState('');\n   \n    // dropdown\n    const [value,setValue]=useState('bmr');\n    const [gender,setGender]=useState('Male');\n    const [feet, setFeet]=useState('5');\n    const [inches,setInches]=useState('5');\n\n\n    \n\n\n// const selectRegion = (val) => {\n//     setRegion(val);\n// }\n\nconst dropDownChange = (e) => {\n    setValue(e.target.value);   \n}\n\nconst dropDownGender = (e) => {\n    setGender(e.target.value);   \n}\n\nconst dropDownFeet = (e) => {\n    setFeet(e.target.value);\n}\nconst dropDownInches = (e) => {\n    setInches(e.target.value);\n}\n\n\n\n/* initialize bascInfo object to fill in values:\n    username\n    firstname\n    lastname\n    country\n\n    setState of Flag to true (initially 0) to invoke a re-render of the second form.\n    reset() the react-hook-form object to clean and re-use for the second form.\n*/\nconst onSubmit = formData => {\n    \n    console.log(\"submit worked!\");\n        basicInfo = {   uid:loadFromLocalStorage(\"isLogged\").isLogged[1][0],\n                        username: formData.username,\n                        firstname: formData.firstname,\n                        lastname: formData.lastname,              \n};\n\n    basicInfoArray.push(basicInfo);\n    setFlag(true);\n    reset();\n\n}\n\n\n// where all the submissions get posted\n\nconst onSubmit2 = async formData => {\n\n    console.log(\"submit 2 worked!\");\n    let height_cm = inchesToCentimeters(parseInt(feet),parseInt(inches));\n    let bmr = calculateBMR(gender,formData.weight,height_cm,formData.age);\n    let caloric_needs = calculateCalories(bmr,value);\n\n    \n    basicInfo = {\n        bmr: bmr,\n        calories: caloric_needs,\n        weight_lbs: parseInt(formData.weight),\n        activity_level: value,\n        gender: gender,\n        height_cm: height_cm,\n        age: parseInt(formData.age),\n        calorieTarget: parseInt(formData.calorieTarget)\n    }\n    basicInfoArray.push(basicInfo);\n    console.log(basicInfoArray);\n\n\n\n    await fetch (registerBasicInfoApi, {\n        method: 'POST',\n        headers: {\n            'accept': 'application/json',\n            'content-type':'application/json'\n        },\n        body: JSON.stringify(basicInfoArray[0])\n    }).then(response => response.text())\n        .then(response => console.log(\"SUCCESS\"))\n            .catch(error => console.log(error));\n\n\n    \n    await fetch (registerFitnessInfoApi, {\n        method: 'POST',\n        headers: {\n            'accept': 'application/json',\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n            uid: basicInfoArray[0].uid,\n            age: basicInfoArray[1].age,\n            gender: basicInfoArray[1].gender,\n            height: basicInfoArray[1].height_cm,\n            weight: basicInfoArray[1].weight_lbs,\n            activity_level: basicInfoArray[1].activity_level,\n            bmr: basicInfoArray[1].bmr,\n            calories: basicInfoArray[1].calories,\n            calorieTarget: basicInfoArray[1].calorieTarget\n        })\n    }).then(response => response.text())\n            .then(response => console.log(\"SUCCESS\"))\n                .catch(error => console.log(error))\n\n\n    // dispatch\n    console.log(loadFromLocalStorage('isLogged').isLogged);\n    dispatch(authenticateUserLoggedIn(loadFromLocalStorage('isLogged').isLogged[1][0],basicInfoArray[0].username))\n    // push to dashboard\n    history.push(`/${basicInfoArray[0].username}`);\n\n\n}\n\n\n    \n    // if user logged in but no username yet\n    if (loadFromLocalStorage('isLogged').isLogged[0] === true && loadFromLocalStorage('isLogged').isLogged[1][1] === null) {\n        if(isFormSubmitted === false) {      \n            return (\n                <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n                            <form className=\"h-75 p-4 d-flex flex-column justify-content-start\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                                <h2 className=\"mx-auto\">Let's Get Started</h2>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Username</label>\n                                    <input name=\"username\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Username is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{4,10}$/,\n                                                message: \"Length should be: 4-10 with no special characters.\"\n                                            },\n                                            validate: isUsernameExist\n                                        })}\n                                        \n                                        />\n                                        {errors.username && <span>{errors.username.message}</span>}\n                                        {errors.username && errors.username.type === \"validate\" && (\n                                        <span>Username already exists.</span>\n                                        )}\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Firstname</label>\n                                    <input name=\"firstname\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"firstnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Firstname is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{2,20}$/,\n                                                message: \"Firstname length should not be more than 20.\"\n                                            },\n                                            \n                                        })}\n                                        \n                                        />\n                                        {errors.firstname && <span>{errors.firstname.message}</span>}\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"emailInput\">Lastname</label>\n                                    <input name=\"lastname\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"lastnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Lastname is required.\"\n                                            },\n                                            pattern: {\n                                                value: /^[a-zA-Z0-9]{2,20}$/,\n                                                message: \"Lastname length should not be more than 20.\"\n                                            },\n                                            \n                                        })}\n                                        \n                                        />\n                                        {errors.lastname && <span>{errors.lastname.message}</span>}\n                                </div>\n                               \n                                <button type=\"submit\" className=\"btn mx-auto\">Next</button>\n                            </form>\n        \n        \n                </div>      \n            )\n        } else {return (\n            <div className=\"container-fluid h-100 d-flex flex-column justify-content-center align-items-center\">\n      \n                <form className=\"h-75 p-4 d-flex flex-column justify-content-start text-center\" onSubmit={handleSubmit(onSubmit2)} noValidate>\n                    <span>\n                    <h2 className=\"mx-auto\" style={{fontSize: \"0.80em\"}}>LETS CALCULATE YOUR CALORIC NEEDS     \n                    <FaInfoCircle  className=\"text-info ml-3\" style={{position:\"relative\",fontSize:\"0.5em\"}}\n                    data-toggle=\"tooltip\" data-placement=\"bottom\" title={bmr_tool_tip_string}\n                    /></h2>              \n                    </span>\n                                                                \n                    <div className=\"form-group mx-auto\">\n                        <label htmlFor=\"ageInput\"><b>Age</b></label>\n                        <input name=\"age\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"Age is required!\"\n                                            },\n                                            validate: {                                              \n                                                positive: (value) => parseInt(value, 10) > 0,\n                                                tooOld: (value) => parseInt(value, 10) < 120,\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Incorrect age format!\"\n                                            }                                                                           \n                                        })}                                \n                                        />\n                        {errors.age && <span>{errors.age.message}</span>}\n                        {errors.age?.type === \"tooOld\" && <span>Too old.</span>}\n                        {errors.age?.type === \"positive\" && <span>You can't be 0 years old silly.</span>}\n                    </div>\n                <div className=\"form-group mb-0 mt-2\">\n                <label htmlFor=\"ageInput\" style={{display:\"block\"}}><b>Activity</b></label>\n                    <select value={value} onChange={dropDownChange} className=\"w-75 mx-auto\" aria-describedby=\"activityInput\">\n                         <option value={activity[0][0]}>no exercise</option>\n                         <option value={activity[1][0]}>little or no exercise, desk job</option>\n                         <option value={activity[2][0]}>light exercise/ sports 1-3 days/week</option>\n                         <option value={activity[3][0]}>moderate exercise/ sports 6-7 days/week</option>\n                         <option value={activity[4][0]}>hard exercise every day, or exercising 2 xs/day</option>\n                         <option value={activity[5][0]}>hard exercise 2 or more times per day, or training for marathon, or triathlon, etc.. </option>\n                    </select>\n                </div>\n                <div className=\"form-group mb-0 mt-2\">\n                    <label htmlFor=\"genderInput\" style={{display:\"block\"}}><b>Gender</b></label>\n                    <select value={gender} onChange={dropDownGender} className=\"w-25 mx-auto text-center\" aria-describedby=\"genderInput\">\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>          \n                    </select>\n                </div>\n                <div className=\"form-group mb-0 mt-2\">\n                    <label htmlFor=\"feetInput\"  className=\"mb-2\"style={{display:\"block\"}}><b>Height</b></label>\n                    <label htmlFor=\"feetInput\">Feet</label>\n                    <select value={feet} onChange={dropDownFeet} className=\"w-25 text-center ml-2 mr-2\" aria-describedby=\"feetInput\">\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option> \n                        <option value=\"5\">5</option>   \n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>                \n                    </select>\n                    <label htmlFor=\"inchesInput\">Inches</label>\n                    <select value={inches} onChange={dropDownInches} className=\"w-25 text-center ml-2\" aria-describedby=\"feetInput\">\n                        <option value=\"0\">0</option>\n                        <option value=\"1\">1</option> \n                        <option value=\"2\">2</option>   \n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option> \n                        <option value=\"7\">7</option>   \n                        <option value=\"8\">8</option>\n                        <option value=\"9\">9</option>   \n                        <option value=\"10\">10</option>\n                        <option value=\"11\">11</option> \n                        <option value=\"12\">12</option>            \n                    </select>\n                </div>\n\n                <div className=\"form-group mb-1\">\n                <label htmlFor=\"weightInput\"><b>Weight (lbs)</b></label>\n                <input name=\"weight\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"weightInput\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Weight is required\"\n                    },\n\n                    validate: {\n                        notPossible: (value) => parseInt(value, 10) <= 1000\n                    },\n                    pattern: {\n                        value: /^[1-9][0-9]*$/,\n                        message: \"Incorrect weight format!\"\n                    }   \n                    \n                })}           \n                />\n                 {errors.weight && <span>{errors.weight.message}</span>}\n                 {errors.weight?.type === \"notPossible\" && <span>Not possible.</span>}\n                </div>\n\n                <div className=\"form-group mb-1\">\n                <label htmlFor=\"caloricTargetInput\"><b>Caloric Target (kcal)</b></label>\n                <input name=\"calorieTarget\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"caloricTargetInput\"\n                ref={register({\n                    required: {\n                        value: true,\n                        message: \"Target calories is required\"\n                    },\n                    pattern: {\n                        value: /^[1-9][0-9]*$/,\n                        message: \"Incorrect calorie format\"\n                    }\n\n                 })}\n                />\n                {errors.calorieTarget && <span>{errors.calorieTarget.message}</span>}\n\n                </div>\n\n            <button type=\"submit\" className=\"btn mx-auto\">Done</button>\n                </form>\n                \n\n\n            </div>\n\n\n        );}\n  \n                               \n    }\n    return null;\n\n  \n} \n\n\n// rule of thumb, functions that dont have state change can go out of function\nconst inchesToCentimeters = (feet,inches) => {\n\n    let multiplier_to_inches = 12;\n    let multiplier_to_cm = 2.54;\n\n    let finalCentimeters = ((multiplier_to_inches * feet) + inches) * multiplier_to_cm;\n\n    return ~~finalCentimeters;\n}\n\nconst calculateBMR = (gender,bodyweight,height,age) => {\n    if (gender === \"Male\")\n    {\n        // metric\n        let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5;\n        // similar to casting to int\n        return ~~rounded;\n       \n    } else if (gender === \"Female\") {\n        // metric\n        let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5 - 161;\n        // similar to casting to int\n        return ~~rounded;\n    }\n\n}\nconst calculateCalories = (bmr,activity) => {\n    switch (activity) {\n        case \"bmr\":\n            return ~~(bmr * 1.0);\n        case \"sedentary\":\n            return ~~(bmr * 1.2);\n        case \"lightly-active\":\n            return ~~(bmr * 1.375);\n        case \"moderately-active\":\n            return ~~(bmr * 1.55);\n        case \"very-active\":\n            return ~~(bmr * 1.725);\n        case \"extra-active\":\n            return ~~(bmr * 1.9);\n        default:\n            return ~~(bmr);\n    }\n\n}\n\n\n\n\nexport {inchesToCentimeters,calculateBMR,calculateCalories};\nexport default Setup;\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/userUid.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js",["119"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {getUidFromUsername} from '../db-endpoints/loadProfile';\nimport './userprofile.css';\nimport Popup from './Popup/Popup';\n\nconst UserProfile = ({userid,username,firstname,lastname,usernameSearched,gender,age,height,weight,activityLevel,calories,caloriesTarget}) => {\n\n        // console.log(loadFromLocalStorage('isLogged').isLogged[1]);\n      \n\n\n    let edit,edit2,edit3;\n   \n    const [suid,setSuid] = useState(undefined);\n\n    useEffect(() => {\n        console.log(\"userprofile mounted\");\n    },[])\n\n    useEffect(() => {\n        return () => {console.log(\"userprofile unmounted\")}\n    },[])\n\n    useEffect( () => {\n        let isMounted = true;\n        getUidFromUsername(username).then(searchedUid => {\n            if(isMounted)\n            setSuid(searchedUid);\n        },[username])\n        return () => {isMounted = false};  \n    },[username])\n \n\n            if (userid === suid)\n            {\n                edit =  <Popup identity=\"userProfile\" userId ={userid} username={username} firstname={firstname} lastname={lastname} gender={gender} age={age} height={height} weight={weight} activityLevel={activityLevel}/>\n                edit2 = <Popup identity=\"userStats\" userId ={userid} username={username} firstname={firstname} lastname={lastname} gender={gender} age={age} height={height} weight={weight} activityLevel={activityLevel} caloriesTarget={caloriesTarget}/>\n                edit3 = <Popup identity=\"userTargetCalories\" userId ={userid} username={username} firstname={firstname} lastname={lastname} gender={gender} age={age} height={height} weight={weight} activityLevel={activityLevel}/>\n            }\n            \n            // console.log(selector);\n            // console.log(\"loggedIn: \"+userid);\n            // console.log(\"current: \"+suid);\n\n \n\n\n\n        // validate that username exists\n        if(username !== \"\")\n        {\n            \n            return (\n                <div className=\"user-profile-container\">\n                    <div className=\"user-profile-item\">\n                    <h2 className=\"\">PROFILE {edit}\n                    \n                    \n                    \n                    \n                    </h2>\n                        <div>\n                        <span className=\"userName\">{username}</span>\n                        <span className=\"name\">{firstname +\" \"+lastname}</span>\n                        </div>\n                    </div>\n\n\n                    <div className=\"user-profile-item\">\n                        <h3 className=\"m-1\">JOURNAL {edit2}</h3>\n                        <div className=\"journal-items-container\">\n                            <div className=\"journal-item\"><h4>STATS</h4>\n                                <ul>\n                                    <li>gender: <span>{gender}</span></li>\n                                    <li>age: <span>{age}</span></li>\n                                    <li>height: <span>{height} cm</span></li>\n                                    <li>weight: <span>{weight} lbs</span></li>\n                                </ul>\n                            </div>\n                            <div className=\"journal-item\"><h4>PROGRESS</h4>\n                                <ul>\n                                   <li>Activity Level: <span>{activityLevel}</span></li>\n                                   <li>Daily Burn: <span>{calories} Calories</span></li>\n                                   <li>Daily Calories:<span>{caloriesTarget} Calories</span></li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n\n\n\n                    <div className=\"user-profile-item\"><h3>WORKOUT</h3> <ul>weekly workout playlist</ul></div>      \n                </div>  \n            );\n        } else {\n            return (<div className=\"user-profile-container\">\n            <div className=\"user-profile-item\">Profile\n            <h3>@{usernameSearched} doesnt exist..</h3>\n            \n            </div>\n            <div className=\"user-profile-item\">Journal</div>\n            <div className=\"user-profile-item\">Workout</div>\n            </div>  \n            );\n        }\n\n   \n}\n\nexport default UserProfile;\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/DB/validation.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/Popup.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/ProfileEdit/EditForm.js",["120"],"import {useForm} from 'react-hook-form';\nimport {isUsernameExistWithCheck} from  '../../../../DB/validation';\nimport {authenticateUserLoggedIn} from '../../../../redux/actions';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {useState} from 'react';\nimport Modal from 'react-modal';\nimport {ImCross} from 'react-icons/im';\nimport {BiEdit} from 'react-icons/bi';\nimport '../popup.css';\nimport './editform.css';\n\nexport const EditForm = (props) => {\n\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const {register, handleSubmit, errors} = useForm({\n        defaultValues: {\n            firstname: props.firstname,\n            lastname: props.lastname,\n            weight:props.weight,\n            age: props.age,\n            calorieTarget: props.caloriesTarget\n        }\n    });\n\n\n\n    // mini functions to turn height in cm to feet & inches\n    const takeFeet = (height) => {\n        let feetTaken = height/30.48;\n        return Math.floor(feetTaken);\n       \n    }\n\n    const takeInches = (height) => {\n        let feetTaken = height/30.48;\n        let inches = (feetTaken % 1);  \n      return Math.round(inches*12);\n      \n    \n    }\n\n    const inchesToCentimeters = (feet,inches) => {\n\n        let multiplier_to_inches = 12;\n        let multiplier_to_cm = 2.54;\n    \n        let finalCentimeters = ((multiplier_to_inches * feet) + inches) * multiplier_to_cm;\n    \n        return ~~finalCentimeters;\n    }\n\n    const calculateBMR = (gender,bodyweight,height,age) => {\n        if (gender === \"Male\")\n        {\n            // metric\n            let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5;\n            // similar to casting to int\n            return ~~rounded;\n           \n        } else if (gender === \"Female\") {\n            // metric\n            let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5 - 161;\n            // similar to casting to int\n            return ~~rounded;\n        }\n    }\n    \n\n\n        // used for progress update\n    const calculateCalories = (bmr,activity) => {\n        switch (activity) {\n            case \"bmr\":\n                return ~~(bmr * 1.0);\n            case \"sedentary\":\n                return ~~(bmr * 1.2);\n            case \"lightly-active\":\n                return ~~(bmr * 1.375);\n            case \"moderately-active\":\n                return ~~(bmr * 1.55);\n            case \"very-active\":\n                return ~~(bmr * 1.725);\n            case \"extra-active\":\n                return ~~(bmr * 1.9);\n            default:\n                return ~~(bmr);\n        }\n    \n    }\n\n\n    const [showPop,setShowPop] = useState(false);\n    const [form,setForm] = useState('');\n\n\n    const [gender,setGender] = useState (props.gender);\n    const [feet, setFeet] = useState(takeFeet(props.height));\n    const [inches, setInches] = useState(takeInches(props.height));\n    const [actLevel, setLevel] = useState(props.activityLevel);\n\n\n\n   \n   \n    const  handleOpen = () => {\n        console.log(\"open\");\n        setShowPop(true);\n        setForm(props.identity);\n    }\n\n    const  handleClose = () => {\n        console.log(\"close\");\n        // if dont save save current (using props)\n        setGender(props.gender);\n        setFeet(takeFeet(props.height));\n        setInches(takeInches(props.height));\n        setShowPop(false);\n\n    }\n\n    // Journal functions\n\n    const dropDownGender = (e) => {\n       let {value} = e.target;\n       setGender(value);\n    }\n\n    const dropDownFeet = (e) => {\n        let {value} = e.target;\n        setFeet(value);\n\n    }\n    const dropDownInches = (e) => {\n        let {value} = e.target;\n        setInches(value);\n    }\n\n    const dropDownActivity = (e) => {\n        let {value} = e.target;\n        setLevel(value);\n    }\n\n    const onEditProfile = async formData => {\n        let editUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/edit-profile.php';\n        await fetch (editUrl,{\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId: props.userId,\n                firstname: formData.firstname,\n                lastname: formData.lastname\n            })\n        })\n\n        \n        // instantly to redux state\n        dispatch(authenticateUserLoggedIn(props.userId,formData.username));\n        history.push(`/${props.username}`);\n        console.log(formData);\n        window.location.reload();\n        // setShowPop(false);\n    }\n\n    const onEditStyles = async formData => {\n        let editUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/edit-stats.php';\n\n        await fetch (editUrl,{\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json'\n            },\n            // for some reason inches returned as a string :o so  I had to use parseInt\n            body: JSON.stringify({\n                uid:    props.userId,\n                gender: gender,\n                age:    formData.age,\n                height: inchesToCentimeters(feet,parseInt(inches)),\n                weight: formData.weight,\n                activity_level: actLevel,\n                calories: calculateCalories(calculateBMR(gender,formData.weight,inchesToCentimeters(feet,parseInt(inches)),formData.age),actLevel),\n                caloriesTarget: formData.calorieTarget\n            })\n        }).then(response => response.json())\n            .then (response => console.log(response))\n      \n\n        window.location.reload();\n\n    }\n\n    const profileEdit =\n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n>     \n    <form className=\"pop-form-profile-update\" onSubmit={handleSubmit(onEditProfile)} noValidate>\n    <ImCross className=\"exit-icon\" onClick={handleClose}/>\n    {/* firstname */}\n    <div className=\"form-group pop-up-form-group mb-2\">\n    <label htmlFor=\"emailInput\"><h4>Firstname</h4></label>\n    <input name=\"firstname\" type=\"text\" className=\"form-control w-50 mx-auto text-center\" id=\"\" aria-describedby=\"firstnameInput\"\n        ref={register({\n            required: {\n                value: true,\n                message: \"You can't leave it blank silly.\"\n            },\n            pattern: {\n                value: /^[a-zA-Z]{2,20}$/,\n                message: \"Name format is invalid.\"\n            },\n            \n        })}\n        \n        />\n        {errors.firstname && <span>{errors.firstname.message}</span>}\n</div>\n<div className=\"form-group pop-up-form-group\">\n    <label htmlFor=\"emailInput\"><h4>Lastname</h4></label>\n    <input name=\"lastname\" type=\"text\" className=\"form-control w-50 mx-auto text-center\" id=\"\" aria-describedby=\"firstnameInput\"\n        ref={register({\n            required: {\n                value: true,\n                message: \"You can't leave it blank silly.\"\n            },\n            pattern: {\n                value: /^[a-zA-Z]{2,20}$/,\n                message: \"Name format is invalid.\"\n            },\n            \n        })}\n        \n        />\n        {errors.lastname && <span>{errors.lastname.message}</span>}\n</div>\n<button  type=\"submit\"  className=\"btn save-button\">Save</button>\n</form>\n</Modal>;\n\n    const statsEdit =    \n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n    >     \n                        <form className=\"pop-form-stats-update\" onSubmit={handleSubmit(onEditStyles)} noValidate>\n                        <ImCross className=\"exit-icon\" onClick={handleClose}/>\n                        <div className=\"form-group mb-0 mt-2\">\n                            <label htmlFor=\"genderInput\" style={{display:\"block\"}}><b>Gender</b></label>\n                            <select value={gender} onChange={dropDownGender} className=\"w-25 mx-auto text-center\" aria-describedby=\"genderInput\">\n                                <option value=\"Male\">Male</option>\n                                <option value=\"Female\">Female</option>          \n                            </select>          \n                        </div>\n                        <div className=\"form-group mb-0 mt-2\">\n                            <label htmlFor=\"ageInput\" style={{display:\"block\"}}><b>Age</b></label>\n                            <input name=\"age\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            validate: {                                              \n                                                positive: (value) => parseInt(value, 10) > 0,\n                                                tooOld: (value) => parseInt(value, 10) < 120,\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Incorrect age format!\"\n                                            }                                                                           \n                                        })}                                \n                                        />   \n\n                            {errors.age && <span>{errors.age.message}</span>}\n                            {errors.age?.type === \"tooOld\" && <span>Too old.</span>}\n                            {errors.age?.type === \"positive\" && <span>You can't be 0 years old silly.</span>}\n                        </div>\n                        <div className=\"form-group mb-0 mt-4\">\n                            <label htmlFor=\"feetInput\"  className=\"mb-2\"style={{display:\"block\"}}><b>Height</b></label>\n                            <label htmlFor=\"feetInput\">Feet</label>\n                            <select value={feet} onChange={dropDownFeet} className=\"w-25 text-center ml-2 mr-2\" aria-describedby=\"feetInput\">\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option> \n                            <option value=\"5\">5</option>   \n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>                \n                            </select>\n                        <label htmlFor=\"inchesInput\">Inches</label>\n                            <select value={inches}  onChange={dropDownInches} className=\"w-25 text-center ml-2\" aria-describedby=\"feetInput\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option> \n                            <option value=\"2\">2</option>   \n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option> \n                            <option value=\"7\">7</option>   \n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>   \n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option> \n                            <option value=\"12\">12</option>            \n                            </select>\n                        </div>\n\n                        <div className=\"form-group \">\n                        <label htmlFor=\"weightInput\"><b>Weight (lbs)</b></label>\n                        <input name=\"weight\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"weightInput\"\n                        ref={register({              \n                        validate: {\n                        notPossible: (value) => parseInt(value, 10) <= 1000\n                        },\n                    pattern: {\n                        value: /^[1-9][0-9]*$/,\n                        message: \"Incorrect weight format!\"\n                    }   \n                    })}           \n                />\n                 {errors.weight && <span>{errors.weight.message}</span>}\n                 {errors.weight?.type === \"notPossible\" && <span>Not possible.</span>}\n                        </div>\n                        <div className=\"form-group\">\n\n                        <label htmlFor=\"activityInput\" style={{display:\"block\"}}><b>Activity</b></label>\n                        <select value={actLevel} onChange={dropDownActivity} className=\"w-75 mx-auto\" aria-describedby=\"activityInput\">\n                         <option value=\"bmr\">no exercise</option>\n                         <option value=\"sedentary\">little or no exercise, desk job</option>\n                         <option value=\"lightly-active\">light exercise/ sports 1-3 days/week</option>\n                         <option value=\"moderately-active\">moderate exercise/ sports 6-7 days/week</option>\n                         <option value=\"very-active\">hard exercise every day, or exercising 2 xs/day</option>\n                         <option value=\"extra-active\">hard exercise 2 or more times per day, or training for marathon, or triathlon, etc.. </option>\n                        </select>\n                        </div>\n                        <div className=\"form-group\">\n                        <label htmlFor=\"caloricTargetInput\"><b>Caloric Target (kcal)</b></label>\n                        <input name=\"calorieTarget\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"caloricTargetInput\"\n                        ref={register({\n                            pattern: {\n                                value: /^[1-9][0-9]*$/,\n                                message: \"Incorrect calorie format\"\n                            }\n\n                        })}\n                        />\n                {errors.calorieTarget && <span>{errors.calorieTarget.message}</span>}\n\n                </div>\n\n                        <button  type=\"submit\"  className=\"btn save-button\">Save</button>\n                        </form>\n    \n    </Modal>\n\n    const caloricTargetEdit =\n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n    >     \n    <form className=\"pop-form-stats-update\" noValidate>\n    <ImCross className=\"exit-icon\" onClick={handleClose}/>\n    </form>\n    </Modal>\n\n     \n        if (form === \"userProfile\")\n        {\n           return <> \n            <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n           {profileEdit}       \n           </>\n        } else if (form === \"userStats\") {\n            return <> \n             <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n           {statsEdit}              \n            </>\n        } else if (form === \"userTargetCalories\") {\n            return <> \n              <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n              {caloricTargetEdit}      \n                </>\n        }\n\n        return (\n            <> \n             <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>        \n            </>\n        );\n\n\n\n\n\n}",["121","122"],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/Logbook.js",["123","124","125","126","127"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {LoadFitnessInfo} from '../Dashboard/db-endpoints/loadProfile';\nimport Modal from 'react-modal';\nimport Calendar from 'react-calendar';\nimport moment from 'moment';\nimport './logbook.css';\nimport 'react-calendar/dist/Calendar.css';\nimport './calendar.css';\nimport {ImCalendar,ImCross} from 'react-icons/im'\nimport {MdAddBox} from 'react-icons/md';\nimport {BiChevronLeftSquare,BiChevronRightSquare} from 'react-icons/bi';\nimport {useForm} from 'react-hook-form';\nimport {FoodItem} from './FoodItem/FoodItem';\nconst Logbook = (props) => {\n\n   \n\n    let momentobj;\n    const [userId] = useState(loadFromLocalStorage('isLogged').isLogged[1][0]);\n    const [isOpen,setState] = useState(false);\n    const [date, setDate] = useState(new Date());\n    const [myDate,setMyDate] = useState(moment(date).format('MMM Do YYYY'));\n    const [isOpenFood,setOpenFood] = useState(false);\n    const {register, handleSubmit, errors, reset} = useForm();\n   \n    // console.log(new Date ());\n\n\n    const [calories, setCalories] =  useState({\n        burning: props.calories,\n        target: props.caloriesTarget\n    });\n\n    const handleOpenCalendar = () => {\n        console.log(\"click\");\n        setState(true);\n            if(isOpen === true)  {\n                setState(false);\n            }\n    }  \n    \n    const handleLeft = () => {\n        console.log(\"left\");\n        date.setDate(date.getDate() -1);\n        momentobj = moment(date).format('MMM Do YYYY');\n        setMyDate(momentobj);\n    }\n    const handleRight = () => {\n        console.log(\"right\");\n        date.setDate(date.getDate() +1);\n        momentobj = moment(date).format('MMM Do YYYY');\n        setMyDate(momentobj);\n    }\n    const handleOpenFood = () => {\n        console.log(\"Opened!\");\n        setOpenFood(true);\n    }\n\n    const handleCloseFood = () => {\n        console.log(\"Opened!\");\n        setOpenFood(false);\n    }\n\n    let myCal = \n    <Calendar\n    className=\"tilesContainer mx-auto\"\n    tileClassName=\"tiles\"\n    onChange={setDate}\n    value={date}\n    view={\"month\"}\n    dayHeaderFormat=\"Short\"\n    />\n    \n    isOpen ? myCal = myCal : myCal = null;\n    \n\nuseEffect( () => {\n    console.log(\"logbook mounted\");\n},[])\n\nuseEffect( () => {\n    return (() => {\n        console.log(\"logbook unmounted\");\n    })\n},[])\n\nuseEffect( () => {\n momentobj = moment(date).format('MMM Do YYYY');\n setMyDate(momentobj);\n},[date])\n\n\n\n\nuseEffect( () => {\n    let isMounted = true;\n    {\n    \n    setTimeout( () => {\n        if (isMounted === true)\n        LoadFitnessInfo(userId)\n        .then (data => {\n            setCalories({\n            burning: data.calories,\n            target: data.calories_target\n        })})\n    }\n    ,500)\n   \n    }\n    \n    return () => {isMounted = false;}\n    \n},[props.calories,props.caloriesTarget])\n\n\n// anytime date changes\nuseEffect( () => {\nconsole.log(myDate);\n},[myDate])\n\nuseEffect( () => {\nconsole.log(\"do a pull from users foodlist\");\n},[isOpenFood])\n\n  \n\nconst onSubmit = async (formData,event) => {\n\n    event.preventDefault();\n\n    console.log(formData);\n    setOpenFood(false);\n\n\n}\n\n    return (\n        <div className=\"logbook-container\">\n\n            <div className=\"logbook-item text-center p-2\">\n                <h3>TRACKING</h3>\n                <h4>Daily Burn rate: <span>{calories.burning} Calories</span></h4>\n                <h4> Daily Target: <span>{calories.target} Calories</span></h4>\n                <h3>TODAY</h3>\n            </div>\n            <div className=\"logbook-item text-center\" id=\"log\">\n                <h2 className=\"w-100 mx-auto text-center mt-2\">\n                <BiChevronLeftSquare  className=\"mb-1 mr-4\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block' }} onClick={handleLeft}/>\n                <span className=\"myDate\">{myDate}</span>\n                <ImCalendar className=\"mb-2 ml-2\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}} onClick={handleOpenCalendar}/>\n                <BiChevronRightSquare className=\"mb-1 ml-4\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}} onClick={handleRight}/>\n                </h2>\n                {myCal}\n            \n                <div className=\"log-food-container\">\n                <Modal \n                isOpen={isOpenFood}\n                onRequestClose={handleCloseFood}\n                contentLabel=\"Add food modal\"\n                className=\"popUpFood\"\n                overlayClassName=\"overlay\"\n                ariaHideApp={false}\n                >\n                  \n                    <ImCross className=\"exit-icon\" onClick={handleCloseFood}/>\n                \n                    <div className=\"popUpFood-item\">\n                        <h4>Your food</h4>\n                        <div className=\"pop-userfoodlist w-100 h-100 mt-5\">\n                        <FoodItem/>\n                           \n                        </div>\n                        \n\n                    </div>\n                    <div className=\"popUpFood-item\">\n                   \n                    <form className=\"pop-form-createfood\"  onSubmit={handleSubmit(onSubmit)} noValidate>\n                    <h4 className=\"mt-1\">Create food</h4>\n                    <div className=\"form-group mx-auto\">\n\n                    <label htmlFor=\"caloricTargetInput\"><b>Food name</b></label>\n                    <input name=\"foodName\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"foodnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"please provide a food name.\"\n                                            }\n                                          \n                                        })}                   \n                    />\n                    {errors.foodName && <span>{errors.foodName.message}</span>}\n                    </div>\n                    <div className=\"form-group mx-auto\">\n                    <label htmlFor=\"caloricTargetInput\"><b>Calories</b></label>\n                     <input name=\"foodCalories\" type=\"text\"  className=\"form-control\" id=\"\" aria-describedby=\"foodcaloriesInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"please provide caloric amount.\"\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Numbers only allowed.\"\n                                            }    \n                                          \n                                        })}\n                                        \n                    />\n                     {errors.foodCalories && <span>{errors.foodCalories.message}</span>}\n                    </div>\n                    <div className=\"form-group mx-auto\">\n                    <label htmlFor=\"caloricTargetInput\" style={{display:\"block\"}}><b>Macronutrients (Optional)</b></label>\n                    \n                    <input name=\"foodCarbs\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"C(g)\"\n                      ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of carbs..\"\n                        }    \n                      })}  \n                    />\n                    <input name=\"foodProtein\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"P(g)\"\n                     ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of protein..\"\n                        }    \n                      })}  \n                    />\n                    <input name=\"foodFat\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"F(g)\"\n                     ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of fat..\"\n                        }    \n                      })}  \n                    />\n                   \n\n                    {errors.foodCarbs && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodCarbs.message}</span>}\n                    {errors.foodProtein && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodProtein.message}</span>}\n                    {errors.foodFat && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodFat.message}</span>}\n                 \n                    </div>\n\n\n\n                        <button  className=\"btn mx-auto\">Add</button>\n                    </form>\n                    </div>\n                    <div className=\"popUpFood-item\"><h4>Search food api (do this last)</h4></div>\n                    \n                \n                </Modal>\n                   \n                    <h4 className=\"add-food\" onClick={handleOpenFood}>ADD FOOD<MdAddBox  className=\"mb-1 ml-1\"style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}}/></h4>\n                </div>\n            </div>\n        </div>\n        );\n}\n\n\nexport default Logbook;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/FoodItem/FoodItem.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":104,"column":4,"nodeType":"134","endLine":104,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":6,"column":9,"nodeType":"137","messageId":"138","endLine":6,"endColumn":17},{"ruleId":"139","severity":1,"message":"140","line":23,"column":22,"nodeType":"141","messageId":"142","endLine":23,"endColumn":33},{"ruleId":"135","severity":1,"message":"143","line":39,"column":17,"nodeType":"137","messageId":"138","endLine":39,"endColumn":22},{"ruleId":"135","severity":1,"message":"144","line":2,"column":9,"nodeType":"137","messageId":"138","endLine":2,"endColumn":33},{"ruleId":"128","replacedBy":"145"},{"ruleId":"130","replacedBy":"146"},{"ruleId":"135","severity":1,"message":"147","line":26,"column":44,"nodeType":"137","messageId":"138","endLine":26,"endColumn":49},{"ruleId":"148","severity":1,"message":"149","line":76,"column":22,"nodeType":"137","messageId":"150","endLine":76,"endColumn":27},{"ruleId":"132","severity":1,"message":"151","line":90,"column":14,"nodeType":"152","endLine":90,"endColumn":48},{"ruleId":"153","severity":1,"message":"154","line":99,"column":5,"nodeType":"155","messageId":"156","endLine":112,"endColumn":6},{"ruleId":"132","severity":1,"message":"157","line":116,"column":3,"nodeType":"158","endLine":116,"endColumn":40,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'edit3' is assigned a value but never used.","'isUsernameExistWithCheck' is defined but never used.",["160"],["161"],"'reset' is assigned a value but never used.","no-self-assign","'myCal' is assigned to itself.","selfAssignment","Assignments to the 'momentobj' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},"Update the dependencies array to be: [props.calories, props.caloriesTarget, userId]",{"range":"165","text":"166"},[2876,2913],"[props.calories, props.caloriesTarget, userId]"]