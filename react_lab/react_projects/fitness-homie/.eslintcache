[{"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js":"1","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js":"2","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js":"3","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js":"4","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js":"5","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js":"6","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js":"7","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js":"8","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js":"9","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js":"10","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js":"11","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js":"12","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js":"13","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js":"14","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js":"15","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js":"16","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js":"17","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js":"18","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js":"19","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/DB/validation.js":"20","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/Logbook.js":"21","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js":"22","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/FoodItem/FoodItem.js":"23","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/Popup.js":"24","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/ProfileEdit/EditForm.js":"25"},{"size":1001,"mtime":1613769155462,"results":"26","hashOfConfig":"27"},{"size":914,"mtime":1613769155442,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1613769155462,"results":"29","hashOfConfig":"27"},{"size":664,"mtime":1613769155449,"results":"30","hashOfConfig":"27"},{"size":241,"mtime":1613769155462,"results":"31","hashOfConfig":"27"},{"size":3233,"mtime":1613859624702,"results":"32","hashOfConfig":"27"},{"size":4737,"mtime":1613769155442,"results":"33","hashOfConfig":"27"},{"size":5324,"mtime":1613862257117,"results":"34","hashOfConfig":"27"},{"size":5313,"mtime":1613860119142,"results":"35","hashOfConfig":"27"},{"size":232,"mtime":1613769155449,"results":"36","hashOfConfig":"27"},{"size":17664,"mtime":1613861337383,"results":"37","hashOfConfig":"27"},{"size":551,"mtime":1613769155462,"results":"38","hashOfConfig":"27"},{"size":1999,"mtime":1613769155445,"results":"39","hashOfConfig":"27"},{"size":1286,"mtime":1613861099793,"results":"40","hashOfConfig":"27"},{"size":385,"mtime":1613769155462,"results":"41","hashOfConfig":"27"},{"size":1719,"mtime":1613769155445,"results":"42","hashOfConfig":"27"},{"size":6268,"mtime":1613769155445,"results":"43","hashOfConfig":"27"},{"size":2329,"mtime":1613769155442,"results":"44","hashOfConfig":"27"},{"size":5875,"mtime":1613769155442,"results":"45","hashOfConfig":"27"},{"size":2012,"mtime":1613864595208,"results":"46","hashOfConfig":"27"},{"size":16527,"mtime":1613769155449,"results":"47","hashOfConfig":"27"},{"size":490,"mtime":1613769155445,"results":"48","hashOfConfig":"27"},{"size":6262,"mtime":1613769155449,"results":"49","hashOfConfig":"27"},{"size":1288,"mtime":1613769155445,"results":"50","hashOfConfig":"27"},{"size":17658,"mtime":1613769155445,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1xejscd",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"108"},"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/index.js",[],["109","110"],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/App.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/reportWebVitals.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/LocalStorage.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Home/Home.js",["111","112"],"import React from 'react';\nimport './home.css';\nimport {Link} from 'react-router-dom';\nimport {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {loadFromLocalStorage} from '../LocalStorage';\n\n// remove the underline for Link component from router-dom\nconst linkStyle = {\n    textDecoration: 'none'    \n};\n\n\n\n\n\n\n\n\nconst Home = () => {\n\n    const history = useHistory();\n\n    useEffect( () => {\n        // if(loadFromLocalStorage(\"isLogged\").isLogged[0] !== undefined)\n        //     {\n        //         if (loadFromLocalStorage(\"isLogged\").isLogged[0] === true) {\n        //               // get username (isLogged is an array [0](state of logged in) [1] (an array of logged in userId and username))\n        //             history.push(`/${loadFromLocalStorage('isLogged').isLogged[1][1]}`);\n        //         }\n        //     }\n    })\n\n\n    return (\n        <div className=\"container-fluid\">\n            \n            <nav className=\"navbar navbar-expand-sm navbar-light\">\n                {/* <a className=\"navbar-brand\" href=\"#\">FM</a> */}\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#toggleMeNav\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n                 </button>\n              \n             <div className=\"collapse navbar-collapse justify-content-center\" id=\"toggleMeNav\">\n\n                <ul className=\"navbar-nav\">\n                    <Link to=\"/login\" style={linkStyle}>\n                        <li className=\"nav-item\">\n                        <span className=\"nav-link\">Log In</span>\n                        </li>\n                    </Link>\n                    <Link to=\"/register\" style={linkStyle}>\n                        <li className=\"nav-item\">\n                        <span className=\"nav-link\">Sign Up</span>\n                        </li>\n                    </Link>\n\n                </ul>\n\n             </div>\n            </nav>\n            <div className=\"container d-flex flex-column container-about\">\n                <h2 className=\"mx-auto mt-2 text-center display-2\">The ultimate fitness tracker.</h2>\n                <div className=\"container container-info mt-5\">\n                    <div className=\"flex-item\"><h4>Track your calories.</h4>\n                    </div>\n                    <div className=\"flex-item\"><h4>Easy to use meal planner.</h4> </div>\n                    <div className=\"flex-item\"><h4>See your entire progress.</h4> </div>\n                </div>\n            </div>\n        \n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#706897\" fillOpacity=\"1\" d=\"M0,32L34.3,74.7C68.6,117,137,203,206,224C274.3,245,343,203,411,197.3C480,192,549,224,617,229.3C685.7,235,754,213,823,208C891.4,203,960,213,1029,229.3C1097.1,245,1166,267,1234,234.7C1302.9,203,1371,117,1406,74.7L1440,32L1440,320L1405.7,320C1371.4,320,1303,320,1234,320C1165.7,320,1097,320,1029,320C960,320,891,320,823,320C754.3,320,686,320,617,320C548.6,320,480,320,411,320C342.9,320,274,320,206,320C137.1,320,69,320,34,320L0,320Z\"></path></svg>\n        </div>\n    );\n\n}\n\n\n\nexport default Home;\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Dashboard.js",["113"],"import React from 'react';\nimport {useState,useEffect,createContext} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {LoadBasicInfo,LoadFitnessInfo,getUidFromUsername} from './db-endpoints/loadProfile';\nimport '../assets/fonts/index.css';\nimport \"./dashboard.css\";\nimport Navigation from './Navigation/Navigation';\nimport DashboardContainer from './DashboardContainer';\n\nexport const DashboardContext = createContext();\nexport function Dashboard() {\n\n    const {urlParam} = useParams();\n    const [userInfo, setUserInfo] = useState({\n        username: '',\n        firstname: '',\n        lastname: '',\n        pp_path: ''\n\n    });\n\n\n  \n\n    const [userFitness,setUserFitness] = useState({\n        age: '',\n        heightCm: '',\n        weightLbs: '',\n        gender: '',\n        activity: '',\n        bmr:'',\n        calories: '',\n        calories_target: ''\n    });\n\n    const [dashUid,setDashUid] = useState(undefined);\n    useEffect(() => {\n        let isMounted = true;\n\n        getUidFromUsername(urlParam).then(uid => {\n            if(isMounted === true) {\n                setDashUid(uid);     \n            }\n        })  \n\n        return () => {isMounted = false;}\n    },[urlParam])\n    \n   \n    useEffect( () => {\n       \n        let isMounted = true;\n        let isMounted2 = true;\n    //    comment added\n        LoadBasicInfo(dashUid).then(data => {\n            if (isMounted === true) {\n                if (data !== false) {\n                    // console.log(data);\n                    setUserInfo({\n                        username: data.username,\n                        firstname: data.firstname,\n                        lastname: data.lastname,   \n                        pp_path: data.profile_picture_path\n                    })\n                }\n            }\n        })\n\n\n\n        // LoadProfilePicture(dashUid).then(data => {\n        //     if (data !== false) {\n        //         console.log(data);\n        //     }\n        // })\n        \n        LoadFitnessInfo(dashUid).then(data => {\n            if (isMounted2 === true) {\n                if (data !== false) {\n                    setUserFitness({\n                        gender: data.gender,\n                        age: data.age,\n                        height: data.height_cm,\n                        weight: data.weight_lbs,\n                        activity: data.activity_level,\n                        calories: data.calories,\n                        calories_target: data.calories_target\n                    })\n                }\n            }\n        })\n         // prevents memory leak, make sure that it is mounted first\n       \n        return () => {isMounted = false; isMounted2 = false;} \n         \n    },[dashUid])\n\n    const [loggedUid,setLoggedUid] = useState(undefined);\n\n    useEffect( () => {\n        let isMounted = true;\n        // wait to fetch logged in Object (initially undefined)\n        if (loadFromLocalStorage('isLogged').isLogged[1] !== undefined)\n        {\n            if (isMounted === true)\n            {\n                setLoggedUid(loadFromLocalStorage('isLogged').isLogged[1][0]);\n                \n            }\n        }\n        return () => {isMounted = false;}\n        \n},[loadFromLocalStorage('isLogged').isLogged[1]])\n\n\nuseEffect( () => {\n    console.log(\"dashboard mounted\");\n},[])\n\nuseEffect( () => {\n    return () => {console.log(\"dashboard unmounted\");}\n},[])\n\n\n\n\n\n\n        return (  \n            <div className=\"containerFluid\">\n                \n                <div className=\"row\">\n                <div className=\"col-3 col-sm-2 col-md-2 d-flex flex-column justify-content-center\">\n                    <Navigation is_logged={loadFromLocalStorage('isLogged').isLogged[0]}/>\n                </div>\n                <DashboardContainer \n                        \n                        urlParam={urlParam}    \n                        uid={loggedUid}\n                        username={userInfo.username}\n                        firstname={userInfo.firstname}\n                        lastname={userInfo.lastname}\n                        profile_picture={userInfo.pp_path}\n                        setUserInfo={setUserInfo}\n                        // fitness Information\n                        gender={userFitness.gender}\n                        age={userFitness.age}\n                        height={userFitness.height}\n                        weight={userFitness.weight}\n                        activityLevel={userFitness.activity}\n                        calories={userFitness.calories}\n                        caloriesTarget={userFitness.calories_target}\n                        />\n                </div>   \n            </div>\n            );\n\n\n  \n}\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Login.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Register/Register.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Feed/Feed.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/Setup.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/reducers/isUserLoggedIn.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/db-endpoints/loadProfile.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Login/db-endpoints/db-fetch.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/redux/actions/index.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/SearchBox/SearchBox.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/UserProfile.js",["114"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {getUidFromUsername} from '../db-endpoints/loadProfile';\nimport './userprofile.css';\nimport Popup from './Popup/Popup';\nimport defaultPicture from '../../assets//images/defaulProfilePicture.png';\n\n\n\n\n\n\nconst UserProfile = ({userid,username,firstname,lastname,profile_picture,usernameSearched,gender,age,height,weight,activityLevel,calories,caloriesTarget,setUserInfo}) => {\n\n        // console.log(loadFromLocalStorage('isLogged').isLogged[1]);\n      \n   \n \n\n    let edit,edit2;\n\n    // const profilePictureImg = `http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/assets/user_assets/${username}/images/${username}.jpeg`;\n    const [picture,setPicture] = useState(defaultPicture);\n\n\n\n    const netLostGainCalories = (burning,consuming,display) => {\n\n        let caloriesPerPound = 3500;\n\n        switch(display) {\n            case 'daily':\n            if (Math.sign(burning - consuming) === 1) {\n                return   \"Loosing: \"+Math.round( (((burning - consuming) / caloriesPerPound)) * 1e2 ) / 1e2+\" lbs per day.\";\n            }\n            else if (Math.sign(burning-consuming) === -1) {\n                return   \"Gaining: \"+Math.round( Math.abs(((burning - consuming) / caloriesPerPound)) * 1e2 ) / 1e2+\" lbs per day.\";           \n            }\n            else {return \"not loosing/gaining  weight.\"}\n            case 'weekly':\n\n            if (Math.sign(burning - consuming) === 1) {\n                return  \"Loosing: \"+Math.round( (((burning - consuming) / caloriesPerPound) * 7) * 1e2 ) / 1e2+\" lbs per week.\";\n            }\n            else if (Math.sign(burning-consuming) === -1) {\n                return  \"Gaining: \"+Math.round( Math.abs(((burning - consuming) / caloriesPerPound) * 7) * 1e2 ) / 1e2+\" lbs per week.\";\n            }\n            else {return \"Not loosing/gaining  weight.\"}\n           \n        }\n    }\n\n\n\n   \n    const [suid,setSuid] = useState(undefined);\n  \n\n    useEffect(() => {\n        console.log(\"userprofile mounted\");\n \n    },[])\n\n    useEffect( () => {\n        console.log(profile_picture);\n        if (profile_picture !== null) {\n            setPicture(profile_picture);\n        } else {setPicture(defaultPicture)}\n    },[profile_picture])\n\n    useEffect(() => {\n        return () => {console.log(\"userprofile unmounted\")}\n    },[])\n\n    useEffect( () => {\n        let isMounted = true;\n        getUidFromUsername(username).then(searchedUid => {\n            if(isMounted)\n            setSuid(searchedUid);\n        },[username])\n        return () => {isMounted = false};  \n    },[username])\n \n\n            if (userid === suid)\n            {\n                edit =  <Popup identity=\"userProfile\" userId ={userid} username={username} firstname={firstname} lastname={lastname} gender={gender} age={age} height={height} weight={weight} activityLevel={activityLevel} profile_picture={profile_picture} setUserInfo={setUserInfo}/>\n                edit2 = <Popup identity=\"userStats\" userId ={userid} username={username} firstname={firstname} lastname={lastname} gender={gender} age={age} height={height} weight={weight} activityLevel={activityLevel} caloriesTarget={caloriesTarget} profile_picture={profile_picture} setUserInfo={setUserInfo}/>\n           \n            }\n            \n            // console.log(selector);\n            // console.log(\"loggedIn: \"+userid);\n            // console.log(\"current: \"+suid);\n\n \n            // console.log(netLostGainCalories(calories,caloriesTarget,'weekly'));\n\n\n        // validate that username exists\n        if(username !== \"\")\n        {\n            \n            return (\n                <div className=\"user-profile-container\">\n                    <div className=\"user-profile-item d-flex flex-column\">\n                    <h2 className=\"\">PROFILE {edit}\n                \n                    \n                    \n                    \n                    \n                    </h2>\n                        <img src={picture}  alt=\"\" className=\"profilePicture mx-auto\"/>\n                        <div className=\"mx-auto text-center mt-3\">\n                        <span className=\"userName\">{username}</span>\n                        <span className=\"name\">{firstname +\" \"+lastname}</span>\n                     \n                        </div>\n                    </div>\n\n\n                    <div className=\"user-profile-item\">\n                        <h3 className=\"m-1\">JOURNAL {edit2}</h3>\n                        <div className=\"journal-items-container\">\n                            <div className=\"journal-item\"><h4>STATS</h4>\n                                <ul>\n                                    <li>gender: <span>{gender}</span></li>\n                                    <li>age: <span>{age}</span></li>\n                                    <li>height: <span>{height} cm</span></li>\n                                    <li>weight: <span>{weight} lbs</span></li>\n                                </ul>\n                            </div>\n                            <div className=\"journal-item\"><h4>PROGRESS</h4>\n                                <ul>\n                                   <li>Activity Level: <span>{activityLevel}</span></li>\n                                   <li>Daily Burn: <span>{calories} Calories</span></li>\n                                   <li>Daily Calories:<span>{caloriesTarget} Calories</span></li>\n                                    <li className=\"lossGainCalories\">{netLostGainCalories(calories,caloriesTarget,'weekly')}</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n\n\n\n                    <div className=\"user-profile-item\"><h3>WORKOUT</h3> <ul>weekly workout playlist (coming to v1.1)</ul></div>      \n                </div>  \n            );\n        } else {\n            return (<div className=\"user-profile-container\">\n            <div className=\"user-profile-item\">Profile\n            <h3>@{usernameSearched} doesnt exist..</h3>\n            \n            </div>\n            <div className=\"user-profile-item\">Journal</div>\n            <div className=\"user-profile-item\">Workout</div>\n            </div>  \n            );\n        }\n\n   \n}\n\nexport default UserProfile;\n","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Navigation/Navigation.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/DashboardContainer.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/DB/validation.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/Logbook.js",["115","116","117","118","119"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {loadFromLocalStorage} from '../LocalStorage';\nimport {LoadFitnessInfo} from '../Dashboard/db-endpoints/loadProfile';\nimport Modal from 'react-modal';\nimport Calendar from 'react-calendar';\nimport moment from 'moment';\nimport './logbook.css';\nimport 'react-calendar/dist/Calendar.css';\nimport './calendar.css';\nimport {ImCalendar,ImCross} from 'react-icons/im'\nimport {MdAddBox} from 'react-icons/md';\nimport {BiChevronLeftSquare,BiChevronRightSquare} from 'react-icons/bi';\nimport {TiDelete} from 'react-icons/ti';\nimport {useForm} from 'react-hook-form';\nimport {FoodItem} from './FoodItem/FoodItem';\nconst Logbook = (props) => {\n    \n    \n    \n    \n    const [userId] = useState(loadFromLocalStorage('isLogged').isLogged[1][0]);\n    const [isOpen,setState] = useState(false);\n    const [date, setDate] = useState(new Date());\n    const [myDate,setMyDate] = useState(moment(date).format('MMM Do YYYY'));\n    const [preciseDate,setPreciseDate] = useState(moment(date).format('YYYY-MM-DD HH:mm:ss'))\n    // same date format as datetime (mysql)\n    const [isOpenFood,setOpenFood] = useState(false);\n    const [loggedItems,setLoggedItems] = useState([]);\n    const[addClicked,setAddClicked] = useState(false);\n    const [caloriesEaten,setCaloriesEaten] = useState(0);\n    const {register, handleSubmit,errors} = useForm();\n    let foodLogDivArray = [];\n    \n    \n    const onSubmit = async (formData,event) => {\n        \n        let createFoodUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/createfood.php';\n        let logFoodUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/logfood.php';\n        // prevents page from refeshing aswell as disable normal operations of a typical submit function of a form..\n        event.preventDefault();\n        // get the username that is logged in\n        let uname = loadFromLocalStorage('isLogged').isLogged[1][1];\n        //send username + formData to the database\n        \n        \n        \n        // assign food php url and convert formData object + username to JSON format\n        await fetch(createFoodUrl,{\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: uname,\n                foodname: formData.foodName,\n                calories: parseInt(formData.foodCalories),\n                carbohydrates: parseInt(formData.foodCarbs),\n                protein: parseInt(formData.foodProtein),\n                fat: parseInt(formData.foodFat)\n            })\n        })\n        \n        await fetch(logFoodUrl,{\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: uname,\n                loggedDateSimple: moment(date).format('YYYY-MM-DD'),\n                preciseLoggedDate: preciseDate,\n                foodname: formData.foodName,\n                calories: parseInt(formData.foodCalories),\n                carbohydrates: parseInt(formData.foodCarbs),\n                protein: parseInt(formData.foodProtein),\n                fat: parseInt(formData.foodFat)\n            })\n        })\n        // close the modal\n        fetchUserLoggedFoods();\n        setOpenFood(false);\n        \n        \n    }\n\n\n\n    \n    \n    \n    const fetchUserLoggedFoods = async () => {\n\n        const calculateCalories = (lfitems) => {\n            let total = 0;\n            lfitems.map((item) => {\n                total += item.calories;\n            })\n            return total;\n        }\n        let username = loadFromLocalStorage('isLogged').isLogged[1][1];\n        let displayLoggedFoods = `http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/displayLoggedFood.php?username=${username}&dateSelected=${moment(date).format('YYYY-MM-DD')}`\n        \n        const loggedFoods = await fetch(displayLoggedFoods, {\n            method: 'GET',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            }\n        });\n        const loggedFoodItems = await loggedFoods.json();\n        setLoggedItems(loggedFoodItems);   \n       let total;\n     total =  calculateCalories(loggedFoodItems);\n     setCaloriesEaten(total);\n    }\n    \n    \n    \n    const [calories, setCalories] =  useState({\n        burning: props.calories,\n        target: props.caloriesTarget\n    });\n    \n    const handleOpenCalendar = () => {\n        console.log(\"click\");\n        setState(true);\n        if(isOpen === true)  {\n            setState(false);\n        }\n    } \n    \n    // const daySelected = () => {\n    //     setState(false);\n    // }\n    \n    \n    \n    \n    const handleLeft = () => {\n        date.setDate(date.getDate()-1);\n        let curTime = new Date();\n        setPreciseDate(moment(date).format('YYYY-MM-DD') +' '+moment(curTime).format('HH:mm:ss'))\n        // visuals update\n        setMyDate(moment(date).format('MMM Do YYYY'));\n        \n    }\n    const handleRight = () => {\n        date.setDate(date.getDate()+1);\n        let curTime = new Date();\n        setPreciseDate(moment(date).format('YYYY-MM-DD') +' '+moment(curTime).format('HH:mm:ss'));\n        // visuals update\n        setMyDate(moment(date).format('MMM Do YYYY'));\n    }\n    const handleOpenFood = () => {\n        console.log(\"Opened!\");\n        setOpenFood(true);\n    }\n    \n    const handleCloseFood = () => {\n        console.log(\"Opened!\");\n        setOpenFood(false);\n    }\n    const handleClickAdd = () => {\n        setAddClicked(true);\n        if(addClicked === true)  {\n            setAddClicked(false);\n        }\n    }\n\n    const deleteLoggedFood = (e) => {\n\n        console.log('food  deleted clicked');\n        const deleteLoggedFoodFromDatabase = async (uname, arrayIndex) => {\n            let url = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/deleteLoggedFood.php';\n\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify({\n                    username: uname,\n                    rowNumber: parseInt(arrayIndex),\n                    simpleDate:moment(date).format('YYYY-MM-DD')\n                })\n            }).then( response => response.text())\n                .then(response => console.log(response));       \n        }\n\n\n\n        let tempArray = loggedItems;\n        let curDeletedIndex = e.currentTarget.getAttribute('logged-food-index');\n        console.log(curDeletedIndex);\n        tempArray.splice(curDeletedIndex,1);\n        setLoggedItems([...tempArray]);\n        let username = loadFromLocalStorage('isLogged').isLogged[1][1];\n        deleteLoggedFoodFromDatabase(username,curDeletedIndex);\n        fetchUserLoggedFoods();\n    }\n    \n    let myCal = \n    <Calendar\n    className=\"tilesContainer mx-auto\"\n    tileClassName=\"tiles\"\n    value={date}\n    onChange={setDate}\n    // onClickDay={daySelected}\n    view={\"month\"}\n    dayHeaderFormat=\"Short\"\n    />\n    \n    isOpen ? myCal = myCal : myCal = null;\n    \n\nuseEffect( () => {\n    console.log(\"logbook mounted\");\n},[])\n\nuseEffect( () => {\n    return (() => {\n        console.log(\"logbook unmounted\");\n    })\n},[])\n\n\nconst [today,setToday] = useState(<h3>{myDate}</h3>);\n\n\nuseEffect( () => {\n\n let curTime = new Date();\n let curDate = moment(date).format('YYYY-MM-DD');\n setPreciseDate(curDate+' '+(moment(curTime).format('HH:mm:ss')))\n setMyDate(moment(date).format('MMM Do YYYY'));\n fetchUserLoggedFoods();\n console.log(curDate); \n\n if (moment(curTime).format('YYYY-MM-DD') === curDate) {\n setToday(<h3>TODAY</h3>);\n } else {setToday(<h3>{myDate}</h3>);}\n\n},[date,preciseDate])\n\n\n\n\n\n\nloggedItems.map((item,index) => {\n \n    let carbs,protein,fat;\n    if (item !== undefined) {\n\n        carbs = item.carbohydrates;\n        protein = item.protein;\n        fat = item.protein;\n        if (item.carbohydrates === null) {\n            carbs = 0;  \n        }  if(item.protein === null) {\n            protein = 0;\n        }  if (item.fat === null) {\n            fat = 0;\n        }\n    \n\n    foodLogDivArray[index] = (\n    <div className=\"food-log\" key={index}>\n    <h4>{item.foodname}</h4>\n    <TiDelete logged-food-index={index} className=\"mb-2 text-danger\" style={{position: 'absolute' ,cursor: 'pointer',top: '0.4em',right:'0.5em',fontSize: '1.5em',display: 'inline-block'}} onClick={deleteLoggedFood}/>\n   \n    <span className=\"mx-1\" style={{display: 'inline-block'}}>{item.calories} Cals</span>\n    <span className=\"mx-1\" style={{display: 'inline-block'}}>{carbs} C</span>\n    <span className=\"mx-1\" style={{display: 'inline-block'}}>{protein} P</span>\n    <span className=\"mx-1\" style={{display: 'inline-block'}}>{fat} F</span>\n    <small className=\"mt-3\" style={{display: 'block',fontSize: '0.95em'}}>{moment(item.food_log_date).format('hh:mm A')}</small>\n    \n    \n    </div>);\n\n    }\n})\n\n\nuseEffect( () => {\n    let isMounted = true;\n    {\n    \n    setTimeout( () => {\n        if (isMounted === true)\n        LoadFitnessInfo(userId)\n        .then (data => {\n            setCalories({\n            burning: data.calories,\n            target: data.calories_target\n        })})\n    }\n    ,500)\n   \n    }\n    \n    return () => {isMounted = false;}\n    \n},[props.calories,props.caloriesTarget,userId])\n\n\n\n    return (\n        <div className=\"logbook-container\">\n\n            <div className=\"logbook-item text-center p-2\">\n                {/* <h3>TRACKING</h3>\n                <h4>Daily Burn rate: <span>{calories.burning} Calories</span></h4> */}\n                {today}\n                <h4><span>Remaining: <span>{calories.target - caloriesEaten}</span> Calories</span></h4>\n            </div>\n            <div className=\"logbook-item text-center\" id=\"log\">\n                <h2 className=\"w-100 mx-auto text-center mt-2\">\n                <BiChevronLeftSquare  className=\"mb-1 mr-4\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block' }} onClick={handleLeft}/>\n                <span className=\"myDate\">{myDate}</span>\n                <ImCalendar className=\"mb-2 ml-2\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}} onClick={handleOpenCalendar}/>\n                <BiChevronRightSquare className=\"mb-1 ml-4\" style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}} onClick={handleRight}/>\n                </h2>\n                {myCal}\n            \n                <div className=\"log-food-container\">\n                <h4 className=\"add-food\" onClick={handleOpenFood}>ADD FOOD<MdAddBox  className=\"mb-1 ml-1\"style={{position: 'relative', cursor: 'pointer',display: 'inline-block'}}/></h4>\n                <Modal \n                isOpen={isOpenFood}\n                onRequestClose={handleCloseFood}\n                contentLabel=\"Add food modal\"\n                className=\"popUpFood\"\n                overlayClassName=\"lg-overlay\"\n                ariaHideApp={false}  \n                >\n                  \n                    <ImCross className=\"exit-icon\" onClick={handleCloseFood}/>\n                \n                    <div className=\"popUpFood-item\">\n                        <h4>Your food</h4>\n                            <div className=\"pop-userfoodlist w-100 h-100 mt-5\">\n                                <FoodItem \n                                loggedItems={loggedItems}\n                                setLoggedItems={setLoggedItems}\n                                setOpenFood={setOpenFood}\n                                simpleDate={moment(date).format('YYYY-MM-DD')}\n                                setCaloriesEaten={setCaloriesEaten}\n\n                                />   \n                            </div>\n                        \n\n                    </div>\n                    <div className=\"popUpFood-item\">\n                   \n                    <form className=\"pop-form-createfood\"  onSubmit={handleSubmit(onSubmit)} noValidate>\n                    <h4 className=\"mt-1\">Create food</h4>\n                    <div className=\"form-group mx-auto\">\n\n                    <label htmlFor=\"caloricTargetInput\"><b>Food name</b></label>\n                    <input name=\"foodName\" type=\"text\" className=\"form-control\" id=\"\" aria-describedby=\"foodnameInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"please provide a food name.\"\n                                            }\n                                          \n                                        })}                   \n                    />\n                    {errors.foodName && <span>{errors.foodName.message}</span>}\n                    </div>\n                    <div className=\"form-group mx-auto\">\n                    <label htmlFor=\"caloricTargetInput\"><b>Calories</b></label>\n                     <input name=\"foodCalories\" type=\"text\"  className=\"form-control\" id=\"\" aria-describedby=\"foodcaloriesInput\"\n                                        ref={register({\n                                            required: {\n                                                value: true,\n                                                message: \"please provide caloric amount.\"\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Numbers only allowed.\"\n                                            }    \n                                          \n                                        })}\n                                        \n                    />\n                     {errors.foodCalories && <span>{errors.foodCalories.message}</span>}\n                    </div>\n                    <div className=\"form-group mx-auto\">\n                    <label htmlFor=\"caloricTargetInput\" style={{display:\"block\"}}><b>Macronutrients (Optional)</b></label>\n                    \n                    <input name=\"foodCarbs\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"C(g)\"\n                      ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of carbs..\"\n                        }    \n                      })}  \n                    />\n                    <input name=\"foodProtein\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"P(g)\"\n                     ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of protein..\"\n                        }    \n                      })}  \n                    />\n                    <input name=\"foodFat\" type=\"text\" className=\"form-control w-25 mx-1\" style={{display: 'inline-block'}} placeholder=\"F(g)\"\n                     ref={register({\n                        pattern: {\n                            value: /^[1-9][0-9]*$/,\n                            message: \"Enter only the NUMBER of fat..\"\n                        }    \n                      })}  \n                    />\n                   \n\n                    {errors.foodCarbs && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodCarbs.message}</span>}\n                    {errors.foodProtein && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodProtein.message}</span>}\n                    {errors.foodFat && <span  className=\"mt-2\" style={{display: 'block', fontSize: '0.6em'}}>{errors.foodFat.message}</span>}\n                 \n                    </div>\n\n\n\n                        <button  className=\"btn mx-auto\" onClick={handleClickAdd}>Add</button>\n                    </form>\n                    </div>\n                    <div className=\"popUpFood-item\"><h4>FOOD API (coming to v1.1)</h4></div>\n                    \n                \n                </Modal>\n                {foodLogDivArray}\n               \n                    \n                </div>\n            </div>\n        </div>\n        );\n}\n\n\nexport default Logbook;","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/Settings/Settings.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/FoodItem/FoodItem.js",["120"],"import React from 'react';\nimport {useState,useEffect} from 'react';\nimport {loadFromLocalStorage} from '../../LocalStorage';\nimport {FaTrashAlt} from 'react-icons/fa';\nimport moment from 'moment';\n\n\n\n\nexport const FoodItem = ({loggedItems,setLoggedItems,simpleDate,setOpenFood,setCaloriesEaten}) => {\n    \n    const fetchUserFoods = async () => {\n    let username = loadFromLocalStorage('isLogged').isLogged[1][1];\n    let displayFoodList = `http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/displayFoodlist.php?username=${username}`;\n    \n    const foodData = await fetch(displayFoodList,{\n            method: 'GET',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json',\n            }\n        });\n\n        const items = await foodData.json();\n        setFoodItems(items);\n    }\n\n     \n    const fetchUserLoggedFoods = async () => {\n\n        const calculateCalories = (lfitems) => {\n            let total = 0;\n            lfitems.map((item) => {\n                total += item.calories;\n            })\n            return total;\n        }\n       let total = calculateCalories(loggedItems);\n       setCaloriesEaten(total);\n    }\n    \n\n\n    const [foodItems, setFoodItems] = useState([]);\n  \n    useEffect(() =>{\n        fetchUserFoods();\n    },[])\n\n\n\n    const addFoodItemToLog = (e) => {\n\n\n        let timeAdded = new Date();\n        console.log(moment(timeAdded).format('HH:mm:ss'));\n        let fullTimeAdded = (simpleDate+' '+moment(timeAdded).format('HH:mm:ss'));\n        console.log (fullTimeAdded);\n\n        console.log('add food item to log clicked');\n        const addFoodItemToDatabase = async (uname,foodname,cals,carbs,protein,fat) => {\n            let url = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/logfood.php';\n\n            await fetch(url,{\n                method: 'POST',\n                headers: {\n                    'accept': 'application/json',\n                    'content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    username: uname,\n                    loggedDateSimple: simpleDate,\n                    preciseLoggedDate: fullTimeAdded,\n                    foodname: foodname,\n                    calories: cals,\n                    carbohydrates: carbs,\n                    protein: protein,\n                    fat: fat\n                })\n            })\n        }\n\n\n        let clickedFoodItem = e.currentTarget.getAttribute('food-index');\n        let tempArray2 = loggedItems;\n        // get the length of the current logged items and append to the endpoints\n        // starts at 0, but splice iteration starts at 1 so +1, and add the clicked food item\n        // add the the front (unshift)\n        tempArray2.unshift(foodItems[clickedFoodItem]);\n        console.log(foodItems[clickedFoodItem]);\n        setLoggedItems([...tempArray2]);\n\n        let username = loadFromLocalStorage('isLogged').isLogged[1][1];\n       \n\n            addFoodItemToDatabase(\n                username,\n                foodItems[clickedFoodItem].foodname,\n                foodItems[clickedFoodItem].calories,\n                foodItems[clickedFoodItem].carbohydrates,\n                foodItems[clickedFoodItem].protein,\n                foodItems[clickedFoodItem].fat\n                )\n        \n        \n        setOpenFood(false);\n        fetchUserLoggedFoods();\n\n    }\n\n   \n    const deleteFoodItem = (e) => {\n\n        console.log('delete food item clicked');\n        e.stopPropagation();\n        const deleteFoodFromDatabase = async (uname,arrayIndex) => {\n            let url = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Logbook/deletefood.php';\n            \n                await fetch(url, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: uname,\n                        rowNumber: parseInt(arrayIndex)\n                    })\n                })\n\n                 \n        }\n\n        let tempArray = foodItems;\n\n        /*  get attribute 'food-index' which contains the cur .index (location of the clicked element)\n            and use it as a reference for deletion (splice)\n        */\n\n        /*\n        Use e.currentTarget.getAttribute('data-value'). The target property refers to the dom \n        element on which the event originated (which will be the svg element), whereas currentTarget refers to the \n        element to which the handler was attached.        \n        */\n\n        let curDeletedIndex = e.currentTarget.getAttribute('food-index');\n        // setIndex(e.currentTarget.getAttribute('food-index'));\n        tempArray.splice(curDeletedIndex,1)\n        // change the current array stored in state 'foodItems'\n        setFoodItems([...tempArray]);\n        let username = loadFromLocalStorage('isLogged').isLogged[1][1];\n        deleteFoodFromDatabase(username,curDeletedIndex);    \n    }\n\n \n\n    let yfDeleteStyle = {\n\n        position: 'relative',\n        float: 'right',\n    };\n\n \n    if(foodItems !== undefined)\n    return ( <>\n        {foodItems.map((foodItem,index) => (\n        <div  onClick={addFoodItemToLog}  key={index} food-index={index}>\n            <ul>\n                <li>{foodItem.foodname}<FaTrashAlt className=\"ml-1 mb-1 text-danger\" style={yfDeleteStyle} onClick={deleteFoodItem}\n                food-index={index}              \n                /></li>\n                <li className=\"mx-1\" style={{display: 'inline-block'}}>cals:{foodItem.calories}</li>\n                <li className=\"mx-1\" style={{display: 'inline-block'}}>c: {foodItem.carbohydrates}\n                </li>\n                <li className=\"mx-1\" style={{display: 'inline-block'}}>p: {foodItem.protein} </li>\n                <li className=\"mx-1\" style={{display: 'inline-block'}}>f:{foodItem.fat}</li>\n            </ul>\n        </div>\n       \n        ))}\n    </>\n\n\n    );\n    \n    return null;\n\n  \n\n\n\n      \n// format   \n    //     <div>\n    //     <span>food name</span>\n    //     <ul>\n    //         <li>cals: /data/</li>\n    //         <li>c: /data/</li>\n    //         <li>p: /data/</li>\n    //         <li>f: /data/</li>\n    //     </ul>\n    //    </div>\n\n  \n}","/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/Popup.js",[],"/srv/http/boskyle.com/public_html/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/ProfileEdit/EditForm.js",["121","122","123"],"import {useForm} from 'react-hook-form';\nimport {useState,useEffect} from 'react';\nimport Modal from 'react-modal';\nimport {ImCross} from 'react-icons/im';\nimport {BiEdit} from 'react-icons/bi';\nimport '../popup.css';\nimport './editform.css';\n// image upload imports\nimport imageCompression from 'browser-image-compression';\nimport defaultImage from '../../../../assets/images/defaulProfilePicture.png';\n\n\n\nexport const EditForm = (props) => {\n\n\n   \n    const {register, handleSubmit, errors} = useForm({\n        defaultValues: {\n            firstname: props.firstname,\n            lastname: props.lastname,\n            weight:props.weight,\n            age: props.age,\n            calorieTarget: props.caloriesTarget\n        }\n    });\n\n  \n\n    // mini functions to turn height in cm to feet & inches\n    const takeFeet = (height) => {\n        let feetTaken = height/30.48;\n        return Math.floor(feetTaken);\n       \n    }\n\n    const takeInches = (height) => {\n        let feetTaken = height/30.48;\n        let inches = (feetTaken % 1);  \n      return Math.round(inches*12);\n      \n    \n    }\n\n    const inchesToCentimeters = (feet,inches) => {\n\n        let multiplier_to_inches = 12;\n        let multiplier_to_cm = 2.54;\n    \n        let finalCentimeters = ((multiplier_to_inches * feet) + inches) * multiplier_to_cm;\n    \n        return ~~finalCentimeters;\n    }\n\n    const calculateBMR = (gender,bodyweight,height,age) => {\n        if (gender === \"Male\")\n        {\n            // metric\n            let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5;\n            // similar to casting to int\n            return ~~rounded;\n           \n        } else if (gender === \"Female\") {\n            // metric\n            let rounded = (10 * (bodyweight/2.205)) + (6.25 * height) - (5 * age) + 5 - 161;\n            // similar to casting to int\n            return ~~rounded;\n        }\n    }\n    \n\n\n        // used for progress update\n    const calculateCalories = (bmr,activity) => {\n        switch (activity) {\n            case \"bmr\":\n                return ~~(bmr * 1.0);\n            case \"sedentary\":\n                return ~~(bmr * 1.2);\n            case \"lightly-active\":\n                return ~~(bmr * 1.375);\n            case \"moderately-active\":\n                return ~~(bmr * 1.55);\n            case \"very-active\":\n                return ~~(bmr * 1.725);\n            case \"extra-active\":\n                return ~~(bmr * 1.9);\n            default:\n                return ~~(bmr);\n        }\n    \n    }\n\n\n\n\n\n    const [showPop,setShowPop] = useState(false);\n    const [form,setForm] = useState('');\n    \n    \n    const [gender,setGender] = useState (props.gender);\n    const [feet, setFeet] = useState(takeFeet(props.height));\n    const [inches, setInches] = useState(takeInches(props.height));\n    const [actLevel, setLevel] = useState(props.activityLevel);\n    // used for visual on edit\n    const [pictures,setPictures] = useState(defaultImage);\n    // actual\n    const [uploadPicture,setUploadPicture] = useState();\n    const [picExtension,setPicExtension] = useState(undefined);\n    const [buff,setBuff]= useState(undefined);\n\n\n    \n    useEffect(() => {\n\n        \n        if (props.profile_picture !== undefined) {\n                if(props.profile_picture !== null) {\n                    setPictures(props.profile_picture);   \n                    setPicExtension(props.profile_picture.split('.').pop());\n                }\n        }\n},[])\n   \n\n   \n    const  handleOpen = () => {\n        console.log(\"open\");\n        setShowPop(true);\n        setForm(props.identity);\n    }\n\n    const  handleClose = () => {\n        console.log(\"close\");\n        // if dont save save current (using props)\n        setGender(props.gender);\n        setFeet(takeFeet(props.height));\n        setInches(takeInches(props.height));\n        setShowPop(false);\n\n    }\n\n    // Journal functions\n\n    const dropDownGender = (e) => {\n       let {value} = e.target;\n       setGender(value);\n    }\n\n    const dropDownFeet = (e) => {\n        let {value} = e.target;\n        setFeet(value);\n\n    }\n    const dropDownInches = (e) => {\n        let {value} = e.target;\n        setInches(value);\n    }\n\n    const dropDownActivity = (e) => {\n        let {value} = e.target;\n        setLevel(value);\n    }\n\n    const onEditProfile =  async formData => {\n        let editUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/edit-profile.php';\n        let uploadPhotoUrl ='http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/upload-photo.php';\n        const fd = new FormData();\n        console.log(uploadPicture);\n        try {\n        if(buff !== undefined)\n        {\n            fd.set('profilePicture',uploadPicture,props.username);\n\n        }\n        } catch (err) {\n            console.log(err);\n        }\n        \n        Promise.all([\n\n            fetch (uploadPhotoUrl,{\n              method: 'POST',    \n              body:fd\n          }),\n          fetch (editUrl,{\n              method: 'POST',\n              body: JSON.stringify({\n                  userId: props.userId,\n                  username:props.username,\n                  firstname: formData.firstname,\n                  lastname: formData.lastname,\n                  picExtension: picExtension,\n              })\n              \n          })\n        ]) .then(responses => {\n            return Promise.all(responses.map(response => {\n                return response.text();\n            }))\n        }) .then (() => {\n           window.location.reload();\n        })\n          \n    \n        \n\n\n    }\n\n  \n    \n\n    const onEditStyles = async formData => {\n        let editUrl = 'http://127.0.0.1/laboratory/react_lab/react_projects/fitness-homie/src/Dashboard/UserProfile/Popup/edit-stats.php';\n\n        await fetch (editUrl,{\n            method: 'POST',\n            headers: {\n                'accept': 'application/json',\n                'content-Type': 'application/json'\n            },\n            // for some reason inches returned as a string :o so  I had to use parseInt\n            body: JSON.stringify({\n                uid:    props.userId,\n                gender: gender,\n                age:    formData.age,\n                height: inchesToCentimeters(feet,parseInt(inches)),\n                weight: formData.weight,\n                activity_level: actLevel,\n                calories: calculateCalories(calculateBMR(gender,formData.weight,inchesToCentimeters(feet,parseInt(inches)),formData.age),actLevel),\n                caloriesTarget: formData.calorieTarget\n            })\n        })\n      \n\n        window.location.reload();\n\n    }\n\n\n\n \n\n\n    const onDrop = (image) => {\n   \n        setBuff(image.target.files[0]);\n        console.log(image.target.files[0]);\n        // compression options, limit to 64kb size of blob\n        // console.log(image[0]);\n        const options = {\n            maxSizeMB: 1,\n        }\n        \n        \n        imageCompression(image.target.files[0],options)\n        .then(cf => {\n            // compressed file output\n            let imgType = cf.type;\n            let ext = imgType.substring(imgType.indexOf('/')+1);\n            setPicExtension(ext);\n            setUploadPicture(cf);        \n            setPictures(URL.createObjectURL(image.target.files[0]));\n            }).catch(err => {alert(err)});\n\n    }\n\n\n\n\n\n\n    const profileEdit =\n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n>     \n    <form className=\"pop-form-profile-update\" onSubmit={handleSubmit(onEditProfile)} noValidate encType=\"multipart/form-data\">\n    <ImCross className=\"exit-icon\" onClick={handleClose}/>\n    {/* firstname */}\n    <div className=\"form-group pop-up-form-group mb-2\">\n    <label htmlFor=\"emailInput\"><h4>Firstname</h4></label>\n    <input name=\"firstname\" type=\"text\" className=\"form-control w-50 mx-auto text-center\" id=\"\" aria-describedby=\"firstnameInput\"\n        ref={register({\n            required: {\n                value: true,\n                message: \"You can't leave it blank silly.\"\n            },\n            pattern: {\n                value: /^[a-zA-Z]{2,20}$/,\n                message: \"Name format is invalid.\"\n            },\n            \n        })}\n        \n        />\n        {errors.firstname && <span>{errors.firstname.message}</span>}\n    </div>\n<   div className=\"form-group pop-up-form-group\">\n    <label htmlFor=\"emailInput\"><h4>Lastname</h4></label>\n    <input name=\"lastname\" type=\"text\" className=\"form-control w-50 mx-auto text-center\" id=\"\" aria-describedby=\"firstnameInput\"\n        ref={register({\n            required: {\n                value: true,\n                message: \"You can't leave it blank silly.\"\n            },\n            pattern: {\n                value: /^[a-zA-Z]{2,20}$/,\n                message: \"Name format is invalid.\"\n            },\n            \n        })}\n        \n        />\n        {errors.lastname && <span>{errors.lastname.message}</span>}\n    </div>\n\n\n\n\n        <img className=\"h-50 w-75 editProfilePicture\" src={pictures} alt='profilePicture'/>\n        <input type='file' name='uploadPicture' className='iup' accept=\"image/x-png,image/gif,image/jpeg\" onChange={onDrop}/>\n\n\n\n<button  type=\"submit\"  className=\"btn save-button\">Save</button>\n</form>\n<form>\n\n\n</form>\n</Modal>;\n\n    const statsEdit =    \n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n    >     \n                        <form className=\"pop-form-stats-update\" onSubmit={handleSubmit(onEditStyles)} noValidate>\n                        <ImCross className=\"exit-icon\" onClick={handleClose}/>\n                        <div className=\"form-group mb-0 mt-2\">\n                            <label htmlFor=\"genderInput\" style={{display:\"block\"}}><b>Gender</b></label>\n                            <select value={gender} onChange={dropDownGender} className=\"w-25 mx-auto text-center\" aria-describedby=\"genderInput\">\n                                <option value=\"Male\">Male</option>\n                                <option value=\"Female\">Female</option>          \n                            </select>          \n                        </div>\n                        <div className=\"form-group mb-0 mt-2\">\n                            <label htmlFor=\"ageInput\" style={{display:\"block\"}}><b>Age</b></label>\n                            <input name=\"age\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"emailInput\"\n                                        ref={register({\n                                            validate: {                                              \n                                                positive: (value) => parseInt(value, 10) > 0,\n                                                tooOld: (value) => parseInt(value, 10) < 120,\n                                            },\n                                            pattern: {\n                                                value: /^[1-9][0-9]*$/,\n                                                message: \"Incorrect age format!\"\n                                            }                                                                           \n                                        })}                                \n                                        />   \n\n                            {errors.age && <span>{errors.age.message}</span>}\n                            {errors.age?.type === \"tooOld\" && <span>Too old.</span>}\n                            {errors.age?.type === \"positive\" && <span>You can't be 0 years old silly.</span>}\n                        </div>\n                        <div className=\"form-group mb-0 mt-4\">\n                            <label htmlFor=\"feetInput\"  className=\"mb-2\"style={{display:\"block\"}}><b>Height</b></label>\n                            <label htmlFor=\"feetInput\">Feet</label>\n                            <select value={feet} onChange={dropDownFeet} className=\"w-25 text-center ml-2 mr-2\" aria-describedby=\"feetInput\">\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option> \n                            <option value=\"5\">5</option>   \n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>                \n                            </select>\n                        <label htmlFor=\"inchesInput\">Inches</label>\n                            <select value={inches}  onChange={dropDownInches} className=\"w-25 text-center ml-2\" aria-describedby=\"feetInput\">\n                            <option value=\"0\">0</option>\n                            <option value=\"1\">1</option> \n                            <option value=\"2\">2</option>   \n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option> \n                            <option value=\"7\">7</option>   \n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>   \n                            <option value=\"10\">10</option>\n                            <option value=\"11\">11</option> \n                            <option value=\"12\">12</option>            \n                            </select>\n                        </div>\n\n                        <div className=\"form-group \">\n                        <label htmlFor=\"weightInput\"><b>Weight (lbs)</b></label>\n                        <input name=\"weight\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"weightInput\"\n                        ref={register({              \n                        validate: {\n                        notPossible: (value) => parseInt(value, 10) <= 1000\n                        },\n                    pattern: {\n                        value: /^[1-9][0-9]*$/,\n                        message: \"Incorrect weight format!\"\n                    }   \n                    })}           \n                />\n                 {errors.weight && <span>{errors.weight.message}</span>}\n                 {errors.weight?.type === \"notPossible\" && <span>Not possible.</span>}\n                        </div>\n                        <div className=\"form-group\">\n\n                        <label htmlFor=\"activityInput\" style={{display:\"block\"}}><b>Activity</b></label>\n                        <select value={actLevel} onChange={dropDownActivity} className=\"w-75 mx-auto\" aria-describedby=\"activityInput\">\n                         <option value=\"bmr\">no exercise</option>\n                         <option value=\"sedentary\">little or no exercise, desk job</option>\n                         <option value=\"lightly-active\">light exercise/ sports 1-3 days/week</option>\n                         <option value=\"moderately-active\">moderate exercise/ sports 6-7 days/week</option>\n                         <option value=\"very-active\">hard exercise every day, or exercising 2 xs/day</option>\n                         <option value=\"extra-active\">hard exercise 2 or more times per day, or training for marathon, or triathlon, etc.. </option>\n                        </select>\n                        </div>\n                        <div className=\"form-group\">\n                        <label htmlFor=\"caloricTargetInput\"><b>Caloric Target (kcal)</b></label>\n                        <input name=\"calorieTarget\" type=\"text\" className=\"form-control w-25 text-center mx-auto\" id=\"\" aria-describedby=\"caloricTargetInput\"\n                        ref={register({\n                            pattern: {\n                                value: /^[1-9][0-9]*$/,\n                                message: \"Incorrect calorie format\"\n                            }\n\n                        })}\n                        />\n                {errors.calorieTarget && <span>{errors.calorieTarget.message}</span>}\n\n                </div>\n\n                        <button  type=\"submit\"  className=\"btn save-button\">Save</button>\n                        </form>\n    \n    </Modal>\n\n    const caloricTargetEdit =\n    <Modal \n    isOpen={showPop}\n    onRequestClose={handleClose}\n    contentLabel=\"Minimal Modal Example\"\n    className=\"popUp\"\n    overlayClassName=\"overlay\"\n    >     \n    <form className=\"pop-form-stats-update\" noValidate>\n    <ImCross className=\"exit-icon\" onClick={handleClose}/>\n    </form>\n    </Modal>\n\n\n     \n        if (form === \"userProfile\")\n        {\n           return <> \n            <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n           {profileEdit}       \n           </>\n        } else if (form === \"userStats\") {\n            return <> \n             <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n           {statsEdit}              \n            </>\n        } else if (form === \"userTargetCalories\") {\n            return <> \n              <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>    \n              {caloricTargetEdit}      \n                </>\n        }\n\n        return (\n            <> \n             <BiEdit  className=\" mb-1 edit-icon\"style={{position: \"relative\",display: \"inline-block\"}} onClick={handleOpen}/>        \n            </>\n        );\n\n\n\n\n\n}",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":6,"column":9,"nodeType":"130","messageId":"131","endLine":6,"endColumn":29},{"ruleId":"128","severity":1,"message":"132","line":22,"column":11,"nodeType":"130","messageId":"131","endLine":22,"endColumn":18},{"ruleId":"133","severity":1,"message":"134","line":114,"column":4,"nodeType":"135","endLine":114,"endColumn":48},{"ruleId":"136","severity":1,"message":"137","line":31,"column":9,"nodeType":"138","messageId":"139","endLine":50,"endColumn":10},{"ruleId":"140","severity":1,"message":"141","line":98,"column":32,"nodeType":"142","messageId":"143","endLine":98,"endColumn":34},{"ruleId":"144","severity":1,"message":"145","line":213,"column":22,"nodeType":"130","messageId":"146","endLine":213,"endColumn":27},{"ruleId":"133","severity":1,"message":"147","line":243,"column":3,"nodeType":"148","endLine":243,"endColumn":21,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"141","line":250,"column":30,"nodeType":"142","messageId":"143","endLine":250,"endColumn":32},{"ruleId":"150","severity":1,"message":"151","line":287,"column":5,"nodeType":"152","messageId":"153","endLine":300,"endColumn":6},{"ruleId":"140","severity":1,"message":"141","line":33,"column":32,"nodeType":"142","messageId":"143","endLine":33,"endColumn":34},{"ruleId":"133","severity":1,"message":"154","line":124,"column":3,"nodeType":"148","endLine":124,"endColumn":5,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":181,"column":9,"nodeType":"135","messageId":"158","endLine":202,"endColumn":17,"fix":"159"},{"ruleId":"156","severity":1,"message":"157","line":181,"column":9,"nodeType":"135","messageId":"158","endLine":198,"endColumn":17,"fix":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'loadFromLocalStorage' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-self-assign","'myCal' is assigned to itself.","selfAssignment","React Hook useEffect has missing dependencies: 'fetchUserLoggedFoods' and 'myDate'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setToday' needs the current value of 'myDate'.","ArrayExpression",["163"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'props.profile_picture'. Either include it or remove the dependency array. If 'setPictures' needs the current value of 'props.profile_picture', you can also switch to useReducer instead of useState and read 'props.profile_picture' in the reducer.",["164"],"no-whitespace-before-property","Unexpected whitespace before property then.","unexpectedWhitespace",{"range":"165","text":"166"},{"range":"167","text":"166"},"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},[5558,5560],".",[5411,5413],"Update the dependencies array to be: [date, fetchUserLoggedFoods, myDate, preciseDate]",{"range":"172","text":"173"},"Update the dependencies array to be: [props.profile_picture]",{"range":"174","text":"175"},[7876,7894],"[date, fetchUserLoggedFoods, myDate, preciseDate]",[3463,3465],"[props.profile_picture]"]